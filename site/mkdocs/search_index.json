{
    "docs": [
        {
            "location": "/", 
            "text": "What is Python?\n\n\n\n\nPython is a widely used general-purpose, high-level programming language. Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than would be possible in languages such as C++ or Java. The language provides constructs intended to enable clear programs on both a small and large scale.\n\n\n\n\nPython is Interpreted\n\n\nPython is processed at runtime by the interpreter. You do not need to compile your program before executing it. This is similar to PERL and PHP.\n\n\nPython is Interactive\n\n\nYou can actually sit at a Python prompt and interact with the interpreter directly to write your programs.\n\n\nPython is Object-Oriented\n\n\nPython supports Object-Oriented style or technique of programming that encapsulates code within objects.\n\n\nPython is a Beginner's Language\n\n\nPython is a great language for the beginner-level programmers and supports the development of a wide range of applications from simple text processing to WWW browsers to games.\n\n\nBooks\n\n\n\n\n\n\n\n\nCourses\n\n\n\n\n\n\n\n\nVideos\n\n\n\n\n\n\n\n\nChallenges\n\n\n\n\nwww.pythonchallenge.com\n\n\n\n\nExternal Links\n\n\n\n\nTop 10 Python Libraries Of 2015", 
            "title": "Home"
        }, 
        {
            "location": "/#what-is-python", 
            "text": "Python is a widely used general-purpose, high-level programming language. Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than would be possible in languages such as C++ or Java. The language provides constructs intended to enable clear programs on both a small and large scale.   Python is Interpreted  Python is processed at runtime by the interpreter. You do not need to compile your program before executing it. This is similar to PERL and PHP.  Python is Interactive  You can actually sit at a Python prompt and interact with the interpreter directly to write your programs.  Python is Object-Oriented  Python supports Object-Oriented style or technique of programming that encapsulates code within objects.  Python is a Beginner's Language  Python is a great language for the beginner-level programmers and supports the development of a wide range of applications from simple text processing to WWW browsers to games.", 
            "title": "What is Python?"
        }, 
        {
            "location": "/#books", 
            "text": "", 
            "title": "Books"
        }, 
        {
            "location": "/#courses", 
            "text": "", 
            "title": "Courses"
        }, 
        {
            "location": "/#videos", 
            "text": "", 
            "title": "Videos"
        }, 
        {
            "location": "/#challenges", 
            "text": "www.pythonchallenge.com", 
            "title": "Challenges"
        }, 
        {
            "location": "/#external-links", 
            "text": "Top 10 Python Libraries Of 2015", 
            "title": "External Links"
        }, 
        {
            "location": "/install/", 
            "text": "Installation\n\n\nWindows 8, 64 bit\n\n\nStep 1.\n Install Anaconda\n\n\nhttps://www.continuum.io/downloads\n\n\n\n\nStep 2.\n Discover the Map\n\n\nhttps://docs.python.org/2/library/index.html\n\n\nCentOS 6.3, Cent OS 7\n\n\nDownload developer tools\n\n\nyum groupinstall \nDevelopment tools\n\nyum install zlib-devel\nyum install bzip2-devel\nyum install openssl-devel\nyum install ncurses-devel\nyum install sqlite-devel\n\n\n\n\n\nDownload, compile and install Python\n\n\ncd /opt\nwget --no-check-certificate https://www.python.org/ftp/python/2.7.6/Python-2.7.6.tar.xz\ntar xf Python-2.7.6.tar.xz\ncd Python-2.7.6\n./configure --prefix=/usr/local\nmake \n make altinstall\n\nln -s /usr/local/bin/python2.7 /usr/local/bin/python\n\n## link\n\n# final check\nwhich python\npython -V\n\n# install Anaconda\ncd ~/Downloads\nwget https://repo.continuum.io/archive/Anaconda-2.3.0-Linux-x86_64.sh\nbash ~/Downloads/Anaconda-2.3.0-Linux-x86_64.sh", 
            "title": "Installation"
        }, 
        {
            "location": "/install/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/install/#windows-8-64-bit", 
            "text": "Step 1.  Install Anaconda  https://www.continuum.io/downloads  Step 2.  Discover the Map  https://docs.python.org/2/library/index.html", 
            "title": "Windows 8, 64 bit"
        }, 
        {
            "location": "/install/#centos-63-cent-os-7", 
            "text": "Download developer tools  yum groupinstall  Development tools \nyum install zlib-devel\nyum install bzip2-devel\nyum install openssl-devel\nyum install ncurses-devel\nyum install sqlite-devel  Download, compile and install Python  cd /opt\nwget --no-check-certificate https://www.python.org/ftp/python/2.7.6/Python-2.7.6.tar.xz\ntar xf Python-2.7.6.tar.xz\ncd Python-2.7.6\n./configure --prefix=/usr/local\nmake   make altinstall\n\nln -s /usr/local/bin/python2.7 /usr/local/bin/python\n\n## link\n\n# final check\nwhich python\npython -V\n\n# install Anaconda\ncd ~/Downloads\nwget https://repo.continuum.io/archive/Anaconda-2.3.0-Linux-x86_64.sh\nbash ~/Downloads/Anaconda-2.3.0-Linux-x86_64.sh", 
            "title": "CentOS 6.3, Cent OS 7"
        }, 
        {
            "location": "/ide/", 
            "text": "Today, I write some notes about my favorite Python IDE - \nPyCharm\n.\u00a0I believe it's a good one for developing python, which supports git, vim, etc. This list below contains my favorite features.\n\n\nEditing\n\n\nALT + SHIFT + UP/DOWN: Move line up and down\n\n\nAutocomplete\n\n\nTab (replace)\n\n\nCode Completion\n\n\n\n\ncheck.if ENTER\n\n\n\n\nif check:\n  type_something\n\n\n\n\nMulticursor\n\n\nSHIFT + F6\n\n\nTemplating\n\n\n\n\nNavigator\n\n\nSearching\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\n\n\n\n\nDouble Shift\n\n\nSearch every where\n\n\n\n\n\n\n\nDebuging\n\n\nAlt + Enter\n\n\n\nAlt + Enter is one of shortcuts in \nKeyboard Shortcuts You Cannot Miss\n \n1\n, its\u00a0show the list of available intention actions.\n\n\n\n\nWorkspace\n\n\nCustom\u00a0Scheme\n\n\n\nGo to \nFile - Settings...\n then \nEditor - Colors Fonts\n\n\nNow you can change your scheme, I like \nDarcular\n\n\n\n\nIPython Support\n\n\n\nPyCharm supports usage of IPython magic commands.\n\n\n\n\nVim Support\n\n\n\nYou can configure PyCharm to work as a Vim editor \n2\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeyboard Shortcuts You Cannot Miss\n\n\n\n\n\n\n\u00a0\nConfiguring PyCharm to work as a Vim editor\n\n\n\n\n\n\n\n\n\n\n\nhttp://pastebin.com/qGpWpFYW", 
            "title": "IDE"
        }, 
        {
            "location": "/ide/#editing", 
            "text": "ALT + SHIFT + UP/DOWN: Move line up and down  Autocomplete  Tab (replace)  Code Completion   check.if ENTER   if check:\n  type_something  Multicursor  SHIFT + F6  Templating", 
            "title": "Editing"
        }, 
        {
            "location": "/ide/#navigator", 
            "text": "", 
            "title": "Navigator"
        }, 
        {
            "location": "/ide/#searching", 
            "text": "Command  Description    Double Shift  Search every where", 
            "title": "Searching"
        }, 
        {
            "location": "/ide/#debuging", 
            "text": "", 
            "title": "Debuging"
        }, 
        {
            "location": "/ide/#workspace", 
            "text": "", 
            "title": "Workspace"
        }, 
        {
            "location": "/basic_syntax/", 
            "text": "Print, print\n\n\nprint \nHello World\n\n\n\n\n\nConditional\n\n\nif you_smart:\n    print \nlearn python\n\nelse:\n    print \ngo away\n\n\n\n\n\nLoop\n\n\nIn general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on. There may be a situation when you need to execute a block of code several number of times.\n\n\nProgramming languages provide various control structures that allow for more complicated execution paths. A loop statement allows us to execute a statement or group of statements multiple times. The following diagram illustrates a loop statement\n\n\n\n\n\n\n\n\n\nPython programming language provides following types of loops to handle looping requirements.\n\n\n\n\n\n\n\n\nwhile loop\n\n\nRepeats a statement or group of statements while a given condition is TRUE. It tests the condition before executing the loop body.\n\n\n\n\n\n\nfor loop\n\n\nExecutes a sequence of statements multiple times and abbreviates the code that manages the loop variable.\n\n\n\n\n\n\nnested loops\n\n\nYou can use one or more loop inside any another while, for or do..while loop.\n\n\n\n\n\n\n\n\n\nWhile Loop\n\n\nA while loop statement in Python programming language repeatedly executes a target statement as long as a given condition is true.\n\n\nSyntax\n\n\nThe syntax of a while loop in Python programming language is\n\n\nwhile expression:\n   statement(s)\n\n\n\n\nExample\n\n\ncount = 0\nwhile count \n 9:\n   print 'The count is:', count\n   count += 1\n\nprint \nGood bye!\n\n\n\n\n\nFor Loop\n\n\nIt has the ability to iterate over the items of any sequence, such as a list or a string.\n\n\nSyntax\n\n\nfor iterating_var in sequence:\n   statements(s)\n\n\n\n\nIf a sequence contains an expression list, it is evaluated first. Then, the first item in the sequence is assigned to the iterating variable iterating_var. Next, the statements block is executed. Each item in the list is assigned to iterating_var, and the statement(s) block is executed until the entire sequence is exhausted.\n\n\nExample\n\n\nfor i in range(10):\n    print \nhello\n, i\n\nfor letter in 'Python':\n   print 'Current letter :', letter\n\nfruits = ['banana', 'apple',  'mango']\nfor fruit in fruits:\n   print 'Current fruit :', fruit\n\nprint \nGood bye!\n\n\n\n\n\nYield and Generator\n\n\nYield is a keyword that is used like return, except the function will return a generator.\n\n\ndef createGenerator():\n    yield 1\n    yield 2\n    yield 3\n\nmygenerator = createGenerator() # create a generator\nprint(mygenerator) # mygenerator is an object!\n# \ngenerator object createGenerator at 0xb7555c34\n\nfor i in mygenerator:\n    print(i)\n# 1\n# 2\n# 3\n\n\n\n\nVisit \nYield and Generator explained\n for more information\n\n\nRelated Readings\n\n\n\n\n\"Python Loops\". www.tutorialspoint.com\n\n\n\"What does the \u201cyield\u201d keyword do?\". stackoverflow.com\n\n\n\"Improve Your Python: 'yield' and Generators Explained\". jeffknupp.com\n\n\n\n\nFunctions\n\n\nVariable-length arguments\n\n\ndef functionname([formal_args,] *var_args_tuple ):\n   \nfunction_docstring\n\n   function_suite\n   return [expression]\n\n\n\n\nExample\n\n\n#!/usr/bin/python\n\n# Function definition is here\ndef printinfo( arg1, *vartuple ):\n   \nThis prints a variable passed arguments\n\n   print \nOutput is: \n\n   print arg1\n   for var in vartuple:\n      print var\n   return;\n\n# Now you can call printinfo function\nprintinfo( 10 )\nprintinfo( 70, 60, 50 )\n\n\n\n\n\nRelated Readings\n\n\n\n\n\"Python Functions\". www.tutorialspoint.com\n\n\n\n\nCoding Convention\n\n\nCode layout\n\n\nIndentation: 4 spaces", 
            "title": "Overview"
        }, 
        {
            "location": "/basic_syntax/#print-print", 
            "text": "print  Hello World", 
            "title": "Print, print"
        }, 
        {
            "location": "/basic_syntax/#conditional", 
            "text": "if you_smart:\n    print  learn python \nelse:\n    print  go away", 
            "title": "Conditional"
        }, 
        {
            "location": "/basic_syntax/#loop", 
            "text": "In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on. There may be a situation when you need to execute a block of code several number of times.  Programming languages provide various control structures that allow for more complicated execution paths. A loop statement allows us to execute a statement or group of statements multiple times. The following diagram illustrates a loop statement     Python programming language provides following types of loops to handle looping requirements.     while loop  Repeats a statement or group of statements while a given condition is TRUE. It tests the condition before executing the loop body.    for loop  Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.    nested loops  You can use one or more loop inside any another while, for or do..while loop.", 
            "title": "Loop"
        }, 
        {
            "location": "/basic_syntax/#while-loop", 
            "text": "A while loop statement in Python programming language repeatedly executes a target statement as long as a given condition is true.  Syntax  The syntax of a while loop in Python programming language is  while expression:\n   statement(s)  Example  count = 0\nwhile count   9:\n   print 'The count is:', count\n   count += 1\n\nprint  Good bye!", 
            "title": "While Loop"
        }, 
        {
            "location": "/basic_syntax/#for-loop", 
            "text": "It has the ability to iterate over the items of any sequence, such as a list or a string.  Syntax  for iterating_var in sequence:\n   statements(s)  If a sequence contains an expression list, it is evaluated first. Then, the first item in the sequence is assigned to the iterating variable iterating_var. Next, the statements block is executed. Each item in the list is assigned to iterating_var, and the statement(s) block is executed until the entire sequence is exhausted.  Example  for i in range(10):\n    print  hello , i\n\nfor letter in 'Python':\n   print 'Current letter :', letter\n\nfruits = ['banana', 'apple',  'mango']\nfor fruit in fruits:\n   print 'Current fruit :', fruit\n\nprint  Good bye!", 
            "title": "For Loop"
        }, 
        {
            "location": "/basic_syntax/#yield-and-generator", 
            "text": "Yield is a keyword that is used like return, except the function will return a generator.  def createGenerator():\n    yield 1\n    yield 2\n    yield 3\n\nmygenerator = createGenerator() # create a generator\nprint(mygenerator) # mygenerator is an object!\n#  generator object createGenerator at 0xb7555c34 \nfor i in mygenerator:\n    print(i)\n# 1\n# 2\n# 3  Visit  Yield and Generator explained  for more information  Related Readings   \"Python Loops\". www.tutorialspoint.com  \"What does the \u201cyield\u201d keyword do?\". stackoverflow.com  \"Improve Your Python: 'yield' and Generators Explained\". jeffknupp.com", 
            "title": "Yield and Generator"
        }, 
        {
            "location": "/basic_syntax/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/basic_syntax/#variable-length-arguments", 
            "text": "def functionname([formal_args,] *var_args_tuple ):\n    function_docstring \n   function_suite\n   return [expression]  Example  #!/usr/bin/python\n\n# Function definition is here\ndef printinfo( arg1, *vartuple ):\n    This prints a variable passed arguments \n   print  Output is:  \n   print arg1\n   for var in vartuple:\n      print var\n   return;\n\n# Now you can call printinfo function\nprintinfo( 10 )\nprintinfo( 70, 60, 50 )  Related Readings   \"Python Functions\". www.tutorialspoint.com", 
            "title": "Variable-length arguments"
        }, 
        {
            "location": "/basic_syntax/#coding-convention", 
            "text": "", 
            "title": "Coding Convention"
        }, 
        {
            "location": "/basic_syntax/#code-layout", 
            "text": "Indentation: 4 spaces", 
            "title": "Code layout"
        }, 
        {
            "location": "/basic_syntax_yield/", 
            "text": "Yield and Generators\n\n\nCoroutines and Subroutines\n\n\nWhen we call a normal Python function, execution starts at function's first line and continues until a return statement, exception, or the end of the function (which is seen as an implicit return None) is encountered. Once a function returns control to its caller, that's it. Any work done by the function and stored in local variables is lost. A new call to the function creates everything from scratch.\n\n\nThis is all very standard when discussing functions (more generally referred to as subroutines) in computer programming. There are times, though, when it's beneficial to have the ability to create a \"function\" which, instead of simply returning a single value, is able to yield a series of values. To do so, such a function would need to be able to \"save its work,\" so to speak.\n\n\nI said, \"yield a series of values\" because our hypothetical function doesn't \"return\" in the normal sense. return implies that the function is returning control of execution to the point where the function was called. \"Yield,\" however, implies that the transfer of control is temporary and voluntary, and our function expects to regain it in the future.\n\n\nIn Python, \"functions\" with these capabilities are called generators, and they're incredibly useful. generators (and the yield statement) were initially introduced to give programmers a more straightforward way to write code responsible for producing a series of values. Previously, creating something like a random number generator required a class or module that both generated values and kept track of state between calls. With the introduction of generators, this became much simpler.\n\n\nTo better understand the problem generators solve, let's take a look at an example. Throughout the example, keep in mind the core problem being solved: generating a series of values.\n\n\nNote: Outside of Python, all but the simplest generators would be referred to as coroutines. I'll use the latter term later in the post. The important thing to remember is, in Python, everything described here as a coroutine is still a generator. Python formally defines the term generator; coroutine is used in discussion but has no formal definition in the language.\n\n\nExample: Fun With Prime Numbers\n\n\nSuppose our boss asks us to write a function that takes a list of ints and returns some Iterable containing the elements which are prime1 numbers.\n\n\nRemember, an Iterable is just an object capable of returning its members one at a time.\n\n\n\"Simple,\" we say, and we write the following:\n\n\ndef get_primes(input_list):\n    result_list = list()\n    for element in input_list:\n        if is_prime(element):\n            result_list.append()\n\n    return result_list\n\n\n\n\nor better yet...\n\n\ndef get_primes(input_list):\n    return (element for element in input_list if is_prime(element))\n\n# not germane to the example, but here's a possible implementation of\n# is_prime...\n\ndef is_prime(number):\n    if number \n 1:\n        if number == 2:\n            return True\n        if number % 2 == 0:\n            return False\n        for current in range(3, int(math.sqrt(number) + 1), 2):\n            if number % current == 0:\n                return False\n        return True\n    return False\n\n\n\n\nEither get_primes implementation above fulfills the requirements, so we tell our boss we're done. She reports our function works and is exactly what she wanted.\n\n\nDealing With Infinite Sequences\n\n\nWell, not quite exactly. A few days later, our boss comes back and tells us she's run into a small problem: she wants to use our get_primes function on a very large list of numbers. In fact, the list is so large that merely creating it would consume all of the system's memory. To work around this, she wants to be able to call get_primes with a start value and get all the primes larger than start (perhaps she's solving Project Euler problem 10).\n\n\nOnce we think about this new requirement, it becomes clear that it requires more than a simple change to get_primes. Clearly, we can't return a list of all the prime numbers from start to infinity (operating on infinite sequences, though, has a wide range of useful applications). The chances of solving this problem using a normal function seem bleak.\n\n\nBefore we give up, let's determine the core obstacle preventing us from writing a function that satisfies our boss's new requirements. Thinking about it, we arrive at the following: functions only get one chance to return results, and thus must return all results at once. It seems pointless to make such an obvious statement; \"functions just work that way,\" we think. The real value lies in asking, \"but what if they didn't?\"\n\n\nImagine what we could do if get_primes could simply return the next value instead of all the values at once. It wouldn't need to create a list at all. No list, no memory issues. Since our boss told us she's just iterating over the results, she wouldn't know the difference.\n\n\nUnfortunately, this doesn't seem possible. Even if we had a magical function that allowed us to iterate from n to infinity, we'd get stuck after returning the first value:\n\n\ndef get_primes(start):\n    for element in magical_infinite_range(start):\n        if is_prime(element):\n            return element\n\n\n\n\nImagine get_primes is called like so:\n\n\ndef solve_number_10():\n    # She *is* working on Project Euler #10, I knew it!\n    total = 2\n    for next_prime in get_primes(3):\n        if next_prime \n 2000000:\n            total += next_prime\n        else:\n            print(total)\n            return\n\n\n\n\nClearly, in get_primes, we would immediately hit the case where number = 3 and return at line 4. Instead of return, we need a way to generate a value and, when asked for the next one, pick up where we left off.\n\n\nFunctions, though, can't do this. When they return, they're done for good. Even if we could guarantee a function would be called again, we have no way of saying, \"OK, now, instead of starting at the first line like we normally do, start up where we left off at line 4.\" Functions have a single entry point: the first line.\n\n\nEnter the Generator\n\n\nThis sort of problem is so common that a new construct was added to Python to solve it: the generator. A generator \"generates\" values. Creating generators was made as straightforward as possible through the concept of generator functions, introduced simultaneously.\n\n\nA generator function is defined like a normal function, but whenever it needs to generate a value, it does so with the yield keyword rather than return. If the body of a def contains yield, the function automatically becomes a generator function (even if it also contains a return statement). There's nothing else we need to do to create one.\n\n\ngenerator functions create generator iterators. That's the last time you'll see the term generator iterator, though, since they're almost always referred to as \"generators\". Just remember that a generator is a special type of iterator. To be considered an iterator, generators must define a few methods, one of which is \nnext\n(). To get the next value from a generator, we use the same built-in function as for iterators: next().\n\n\nThis point bears repeating: to get the next value from a generator, we use the same built-in function as for iterators: next().\n\n\n(next() takes care of calling the generator's \nnext\n() method). Since a generator is a type of iterator, it can be used in a for loop.\n\n\nSo whenever next() is called on a generator, the generator is responsible for passing back a value to whomever called next(). It does so by calling yield along with the value to be passed back (e.g. yield 7). The easiest way to remember what yield does is to think of it as return (plus a little magic) for generator functions.**\n\n\nAgain, this bears repeating: yield is just return (plus a little magic) for generator functions.\n\n\nHere's a simple generator function:\n\n\n def simple_generator_function():\n\n    yield 1\n\n    yield 2\n\n    yield 3\n\n\n\n\nAnd here are two simple ways to use it:\n\n\n for value in simple_generator_function():\n\n     print(value)\n1\n2\n3\n\n our_generator = simple_generator_function()\n\n next(our_generator)\n1\n\n next(our_generator)\n2\n\n next(our_generator)\n3\n\n\n\n\nMagic?\n\n\nWhat's the magic part? Glad you asked! When a generator function calls yield, the \"state\" of the generator function is frozen; the values of all variables are saved and the next line of code to be executed is recorded until next() is called again. Once it is, the generator function simply resumes where it left off. If next() is never called again, the state recorded during the yield call is (eventually) discarded.\n\n\nLet's rewrite get_primes as a generator function. Notice that we no longer need the magical_infinite_range function. Using a simple while loop, we can create our own infinite sequence:\n\n\ndef get_primes(number):\n    while True:\n        if is_prime(number):\n            yield number\n        number += 1\n\n\n\n\nIf a generator function calls return or reaches the end its definition, a StopIteration exception is raised. This signals to whoever was calling next() that the generator is exhausted (this is normal iterator behavior). It is also the reason the while True: loop is present in get_primes. If it weren't, the first time next() was called we would check if the number is prime and possibly yield it. If next() were called again, we would uselessly add 1 to number and hit the end of the generator function (causing StopIteration to be raised). Once a generator has been exhausted, calling next() on it will result in an error, so you can only consume all the values of a generator once. The following will not work:\n\n\n our_generator = simple_generator_function()\n\n for value in our_generator:\n\n     print(value)\n\n\n # our_generator has been exhausted...\n\n print(next(our_generator))\nTraceback (most recent call last):\n  File \nipython-input-13-7e48a609051a\n, line 1, in \nmodule\n\n    next(our_generator)\nStopIteration\n\n\n # however, we can always create a new generator\n\n # by calling the generator function again...\n\n\n new_generator = simple_generator_function()\n\n print(next(new_generator)) # perfectly valid\n1\n\n\n\n\nThus, the while loop is there to make sure we never reach the end of get_primes. It allows us to generate a value for as long as next() is called on the generator. This is a common idiom when dealing with infinite series (and generators in general).\n\n\nVisualizing the flow\n\n\nLet's go back to the code that was calling get_primes: solve_number_10.\n\n\ndef solve_number_10():\n    # She *is* working on Project Euler #10, I knew it!\n    total = 2\n    for next_prime in get_primes(3):\n        if next_prime \n 2000000:\n            total += next_prime\n        else:\n            print(total)\n            return\n\n\n\n\nIt's helpful to visualize how the first few elements are created when we call get_primes in solve_number_10's for loop. When the for loop requests the first value from get_primes, we enter get_primes as we would in a normal function.\n\n\n\n\nWe enter the while loop on line 3\n\n\nThe if condition holds (3 is prime)\n\n\nWe yield the value 3 and control to solve_number_10.\n\n\n\n\nThen, back in solve_number_10:\n\n\n\n\nThe value 3 is passed back to the for loop\n\n\nThe for loop assigns next_prime to this value\n\n\nnext_prime is added to total\n\n\nThe for loop requests the next element from get_primes\n\n\n\n\nThis time, though, instead of entering get_primes back at the top, we resume at line 5, where we left off.\n\n\ndef get_primes(number):\n    while True:\n        if is_prime(number):\n            yield number\n        number += 1 # \n\n\n\n\n\nMost importantly, number still has the same value it did when we called yield (i.e. 3). Remember, yield both passes a value to whoever called next(), and saves the \"state\" of the generator function. Clearly, then, number is incremented to 4, we hit the top of the while loop, and keep incrementing number until we hit the next prime number (5). Again we yield the value of number to the for loop in solve_number_10. This cycle continues until the for loop stops (at the first prime greater than 2,000,000).\n\n\nMoar Power\n\n\nIn PEP 342, support was added for passing values into generators. PEP 342 gave generators the power to yield a value (as before), receive a value, or both yield a value and receive a (possibly different) value in a single statement.\n\n\nTo illustrate how values are sent to a generator, let's return to our prime number example. This time, instead of simply printing every prime number greater than number, we'll find the smallest prime number greater than successive powers of a number (i.e. for 10, we want the smallest prime greater than 10, then 100, then 1000, etc.). We start in the same way as get_primes:\n\n\ndef print_successive_primes(iterations, base=10):\n    # like normal functions, a generator function\n    # can be assigned to a variable\n\n    prime_generator = get_primes(base)\n    # missing code...\n    for power in range(iterations):\n        # missing code...\n\ndef get_primes(number):\n    while True:\n        if is_prime(number):\n        # ... what goes here?\n\n\n\n\nThe next line of get_primes takes a bit of explanation. While yield number would yield the value of number, a statement of the form other = yield foo means, \"yield foo and, when a value is sent to me, set other to that value.\" You can \"send\" values to a generator using the generator's send method.\n\n\ndef get_primes(number):\n    while True:\n        if is_prime(number):\n            number = yield number\n        number += 1\n\n\n\n\nIn this way, we can set number to a different value each time the generator yields. We can now fill in the missing code in print_successive_primes:\n\n\ndef print_successive_primes(iterations, base=10):\n    prime_generator = get_primes(base)\n    prime_generator.send(None)\n    for power in range(iterations):\n        print(prime_generator.send(base ** power))\n\n\n\n\nTwo things to note here: First, we're printing the result of generator.send, which is possible because send both sends a value to the generator and returns the value yielded by the generator (mirroring how yield works from within the generator function).\n\n\nSecond, notice the prime_generator.send(None) line. When you're using send to \"start\" a generator (that is, execute the code from the first line of the generator function up to the first yield statement), you must send None. This makes sense, since by definition the generator hasn't gotten to the first yield statement yet, so if we sent a real value there would be nothing to \"receive\" it. Once the generator is started, we can send values as we do above.\n\n\nRound-up\n\n\nIn the second half of this series, we'll discuss the various ways in which generators have been enhanced and the power they gained as a result. yield has become one of the most powerful keywords in Python. Now that we've built a solid understanding of how yield works, we have the knowledge necessary to understand some of the more \"mind-bending\" things that yield can be used for.\n\n\nBelieve it or not, we've barely scratched the surface of the power of yield. For example, while send does work as described above, it's almost never used when generating simple sequences like our example. Below, I've pasted a small demonstration of one common way send is used. I'll not say any more about it as figuring out how and why it works will be a good warm-up for part two.\n\n\nimport random\n\ndef get_data():\n    \nReturn 3 random integers between 0 and 9\n\n    return random.sample(range(10), 3)\n\ndef consume():\n    \nDisplays a running average across lists of integers sent to it\n\n    running_sum = 0\n    data_items_seen = 0\n\n    while True:\n        data = yield\n        data_items_seen += len(data)\n        running_sum += sum(data)\n        print('The running average is {}'.format(running_sum / float(data_items_seen)))\n\ndef produce(consumer):\n    \nProduces a set of values and forwards them to the pre-defined consumer\n    function\n\n    while True:\n        data = get_data()\n        print('Produced {}'.format(data))\n        consumer.send(data)\n        yield\n\nif __name__ == '__main__':\n    consumer = consume()\n    consumer.send(None)\n    producer = produce(consumer)\n\n    for _ in range(10):\n        print('Producing...')\n        next(producer)\n\n\n\n\nRemember...\n\n\nThere are a few key ideas I hope you take away from this discussion:\n\n\n\n\ngenerators are used to generate a series of values\n\n\nyield is like the return of generator functions\n\n\nThe only other thing yield does is save the \"state\" of a generator function\n\n\nA generator is just a special type of iterator\n\n\nLike iterators, we can get the next value from a generator using next()\n\n\nfor gets values by calling next() implicitly", 
            "title": "Yield and Generator"
        }, 
        {
            "location": "/basic_syntax_yield/#yield-and-generators", 
            "text": "", 
            "title": "Yield and Generators"
        }, 
        {
            "location": "/basic_syntax_yield/#coroutines-and-subroutines", 
            "text": "When we call a normal Python function, execution starts at function's first line and continues until a return statement, exception, or the end of the function (which is seen as an implicit return None) is encountered. Once a function returns control to its caller, that's it. Any work done by the function and stored in local variables is lost. A new call to the function creates everything from scratch.  This is all very standard when discussing functions (more generally referred to as subroutines) in computer programming. There are times, though, when it's beneficial to have the ability to create a \"function\" which, instead of simply returning a single value, is able to yield a series of values. To do so, such a function would need to be able to \"save its work,\" so to speak.  I said, \"yield a series of values\" because our hypothetical function doesn't \"return\" in the normal sense. return implies that the function is returning control of execution to the point where the function was called. \"Yield,\" however, implies that the transfer of control is temporary and voluntary, and our function expects to regain it in the future.  In Python, \"functions\" with these capabilities are called generators, and they're incredibly useful. generators (and the yield statement) were initially introduced to give programmers a more straightforward way to write code responsible for producing a series of values. Previously, creating something like a random number generator required a class or module that both generated values and kept track of state between calls. With the introduction of generators, this became much simpler.  To better understand the problem generators solve, let's take a look at an example. Throughout the example, keep in mind the core problem being solved: generating a series of values.  Note: Outside of Python, all but the simplest generators would be referred to as coroutines. I'll use the latter term later in the post. The important thing to remember is, in Python, everything described here as a coroutine is still a generator. Python formally defines the term generator; coroutine is used in discussion but has no formal definition in the language.", 
            "title": "Coroutines and Subroutines"
        }, 
        {
            "location": "/basic_syntax_yield/#example-fun-with-prime-numbers", 
            "text": "Suppose our boss asks us to write a function that takes a list of ints and returns some Iterable containing the elements which are prime1 numbers.  Remember, an Iterable is just an object capable of returning its members one at a time.  \"Simple,\" we say, and we write the following:  def get_primes(input_list):\n    result_list = list()\n    for element in input_list:\n        if is_prime(element):\n            result_list.append()\n\n    return result_list  or better yet...  def get_primes(input_list):\n    return (element for element in input_list if is_prime(element))\n\n# not germane to the example, but here's a possible implementation of\n# is_prime...\n\ndef is_prime(number):\n    if number   1:\n        if number == 2:\n            return True\n        if number % 2 == 0:\n            return False\n        for current in range(3, int(math.sqrt(number) + 1), 2):\n            if number % current == 0:\n                return False\n        return True\n    return False  Either get_primes implementation above fulfills the requirements, so we tell our boss we're done. She reports our function works and is exactly what she wanted.", 
            "title": "Example: Fun With Prime Numbers"
        }, 
        {
            "location": "/basic_syntax_yield/#dealing-with-infinite-sequences", 
            "text": "Well, not quite exactly. A few days later, our boss comes back and tells us she's run into a small problem: she wants to use our get_primes function on a very large list of numbers. In fact, the list is so large that merely creating it would consume all of the system's memory. To work around this, she wants to be able to call get_primes with a start value and get all the primes larger than start (perhaps she's solving Project Euler problem 10).  Once we think about this new requirement, it becomes clear that it requires more than a simple change to get_primes. Clearly, we can't return a list of all the prime numbers from start to infinity (operating on infinite sequences, though, has a wide range of useful applications). The chances of solving this problem using a normal function seem bleak.  Before we give up, let's determine the core obstacle preventing us from writing a function that satisfies our boss's new requirements. Thinking about it, we arrive at the following: functions only get one chance to return results, and thus must return all results at once. It seems pointless to make such an obvious statement; \"functions just work that way,\" we think. The real value lies in asking, \"but what if they didn't?\"  Imagine what we could do if get_primes could simply return the next value instead of all the values at once. It wouldn't need to create a list at all. No list, no memory issues. Since our boss told us she's just iterating over the results, she wouldn't know the difference.  Unfortunately, this doesn't seem possible. Even if we had a magical function that allowed us to iterate from n to infinity, we'd get stuck after returning the first value:  def get_primes(start):\n    for element in magical_infinite_range(start):\n        if is_prime(element):\n            return element  Imagine get_primes is called like so:  def solve_number_10():\n    # She *is* working on Project Euler #10, I knew it!\n    total = 2\n    for next_prime in get_primes(3):\n        if next_prime   2000000:\n            total += next_prime\n        else:\n            print(total)\n            return  Clearly, in get_primes, we would immediately hit the case where number = 3 and return at line 4. Instead of return, we need a way to generate a value and, when asked for the next one, pick up where we left off.  Functions, though, can't do this. When they return, they're done for good. Even if we could guarantee a function would be called again, we have no way of saying, \"OK, now, instead of starting at the first line like we normally do, start up where we left off at line 4.\" Functions have a single entry point: the first line.", 
            "title": "Dealing With Infinite Sequences"
        }, 
        {
            "location": "/basic_syntax_yield/#enter-the-generator", 
            "text": "This sort of problem is so common that a new construct was added to Python to solve it: the generator. A generator \"generates\" values. Creating generators was made as straightforward as possible through the concept of generator functions, introduced simultaneously.  A generator function is defined like a normal function, but whenever it needs to generate a value, it does so with the yield keyword rather than return. If the body of a def contains yield, the function automatically becomes a generator function (even if it also contains a return statement). There's nothing else we need to do to create one.  generator functions create generator iterators. That's the last time you'll see the term generator iterator, though, since they're almost always referred to as \"generators\". Just remember that a generator is a special type of iterator. To be considered an iterator, generators must define a few methods, one of which is  next (). To get the next value from a generator, we use the same built-in function as for iterators: next().  This point bears repeating: to get the next value from a generator, we use the same built-in function as for iterators: next().  (next() takes care of calling the generator's  next () method). Since a generator is a type of iterator, it can be used in a for loop.  So whenever next() is called on a generator, the generator is responsible for passing back a value to whomever called next(). It does so by calling yield along with the value to be passed back (e.g. yield 7). The easiest way to remember what yield does is to think of it as return (plus a little magic) for generator functions.**  Again, this bears repeating: yield is just return (plus a little magic) for generator functions.  Here's a simple generator function:   def simple_generator_function():     yield 1     yield 2     yield 3  And here are two simple ways to use it:   for value in simple_generator_function():      print(value)\n1\n2\n3  our_generator = simple_generator_function()  next(our_generator)\n1  next(our_generator)\n2  next(our_generator)\n3", 
            "title": "Enter the Generator"
        }, 
        {
            "location": "/basic_syntax_yield/#magic", 
            "text": "What's the magic part? Glad you asked! When a generator function calls yield, the \"state\" of the generator function is frozen; the values of all variables are saved and the next line of code to be executed is recorded until next() is called again. Once it is, the generator function simply resumes where it left off. If next() is never called again, the state recorded during the yield call is (eventually) discarded.  Let's rewrite get_primes as a generator function. Notice that we no longer need the magical_infinite_range function. Using a simple while loop, we can create our own infinite sequence:  def get_primes(number):\n    while True:\n        if is_prime(number):\n            yield number\n        number += 1  If a generator function calls return or reaches the end its definition, a StopIteration exception is raised. This signals to whoever was calling next() that the generator is exhausted (this is normal iterator behavior). It is also the reason the while True: loop is present in get_primes. If it weren't, the first time next() was called we would check if the number is prime and possibly yield it. If next() were called again, we would uselessly add 1 to number and hit the end of the generator function (causing StopIteration to be raised). Once a generator has been exhausted, calling next() on it will result in an error, so you can only consume all the values of a generator once. The following will not work:   our_generator = simple_generator_function()  for value in our_generator:      print(value)  # our_generator has been exhausted...  print(next(our_generator))\nTraceback (most recent call last):\n  File  ipython-input-13-7e48a609051a , line 1, in  module \n    next(our_generator)\nStopIteration  # however, we can always create a new generator  # by calling the generator function again...  new_generator = simple_generator_function()  print(next(new_generator)) # perfectly valid\n1  Thus, the while loop is there to make sure we never reach the end of get_primes. It allows us to generate a value for as long as next() is called on the generator. This is a common idiom when dealing with infinite series (and generators in general).", 
            "title": "Magic?"
        }, 
        {
            "location": "/basic_syntax_yield/#visualizing-the-flow", 
            "text": "Let's go back to the code that was calling get_primes: solve_number_10.  def solve_number_10():\n    # She *is* working on Project Euler #10, I knew it!\n    total = 2\n    for next_prime in get_primes(3):\n        if next_prime   2000000:\n            total += next_prime\n        else:\n            print(total)\n            return  It's helpful to visualize how the first few elements are created when we call get_primes in solve_number_10's for loop. When the for loop requests the first value from get_primes, we enter get_primes as we would in a normal function.   We enter the while loop on line 3  The if condition holds (3 is prime)  We yield the value 3 and control to solve_number_10.   Then, back in solve_number_10:   The value 3 is passed back to the for loop  The for loop assigns next_prime to this value  next_prime is added to total  The for loop requests the next element from get_primes   This time, though, instead of entering get_primes back at the top, we resume at line 5, where we left off.  def get_primes(number):\n    while True:\n        if is_prime(number):\n            yield number\n        number += 1 #    Most importantly, number still has the same value it did when we called yield (i.e. 3). Remember, yield both passes a value to whoever called next(), and saves the \"state\" of the generator function. Clearly, then, number is incremented to 4, we hit the top of the while loop, and keep incrementing number until we hit the next prime number (5). Again we yield the value of number to the for loop in solve_number_10. This cycle continues until the for loop stops (at the first prime greater than 2,000,000).", 
            "title": "Visualizing the flow"
        }, 
        {
            "location": "/basic_syntax_yield/#moar-power", 
            "text": "In PEP 342, support was added for passing values into generators. PEP 342 gave generators the power to yield a value (as before), receive a value, or both yield a value and receive a (possibly different) value in a single statement.  To illustrate how values are sent to a generator, let's return to our prime number example. This time, instead of simply printing every prime number greater than number, we'll find the smallest prime number greater than successive powers of a number (i.e. for 10, we want the smallest prime greater than 10, then 100, then 1000, etc.). We start in the same way as get_primes:  def print_successive_primes(iterations, base=10):\n    # like normal functions, a generator function\n    # can be assigned to a variable\n\n    prime_generator = get_primes(base)\n    # missing code...\n    for power in range(iterations):\n        # missing code...\n\ndef get_primes(number):\n    while True:\n        if is_prime(number):\n        # ... what goes here?  The next line of get_primes takes a bit of explanation. While yield number would yield the value of number, a statement of the form other = yield foo means, \"yield foo and, when a value is sent to me, set other to that value.\" You can \"send\" values to a generator using the generator's send method.  def get_primes(number):\n    while True:\n        if is_prime(number):\n            number = yield number\n        number += 1  In this way, we can set number to a different value each time the generator yields. We can now fill in the missing code in print_successive_primes:  def print_successive_primes(iterations, base=10):\n    prime_generator = get_primes(base)\n    prime_generator.send(None)\n    for power in range(iterations):\n        print(prime_generator.send(base ** power))  Two things to note here: First, we're printing the result of generator.send, which is possible because send both sends a value to the generator and returns the value yielded by the generator (mirroring how yield works from within the generator function).  Second, notice the prime_generator.send(None) line. When you're using send to \"start\" a generator (that is, execute the code from the first line of the generator function up to the first yield statement), you must send None. This makes sense, since by definition the generator hasn't gotten to the first yield statement yet, so if we sent a real value there would be nothing to \"receive\" it. Once the generator is started, we can send values as we do above.", 
            "title": "Moar Power"
        }, 
        {
            "location": "/basic_syntax_yield/#round-up", 
            "text": "In the second half of this series, we'll discuss the various ways in which generators have been enhanced and the power they gained as a result. yield has become one of the most powerful keywords in Python. Now that we've built a solid understanding of how yield works, we have the knowledge necessary to understand some of the more \"mind-bending\" things that yield can be used for.  Believe it or not, we've barely scratched the surface of the power of yield. For example, while send does work as described above, it's almost never used when generating simple sequences like our example. Below, I've pasted a small demonstration of one common way send is used. I'll not say any more about it as figuring out how and why it works will be a good warm-up for part two.  import random\n\ndef get_data():\n     Return 3 random integers between 0 and 9 \n    return random.sample(range(10), 3)\n\ndef consume():\n     Displays a running average across lists of integers sent to it \n    running_sum = 0\n    data_items_seen = 0\n\n    while True:\n        data = yield\n        data_items_seen += len(data)\n        running_sum += sum(data)\n        print('The running average is {}'.format(running_sum / float(data_items_seen)))\n\ndef produce(consumer):\n     Produces a set of values and forwards them to the pre-defined consumer\n    function \n    while True:\n        data = get_data()\n        print('Produced {}'.format(data))\n        consumer.send(data)\n        yield\n\nif __name__ == '__main__':\n    consumer = consume()\n    consumer.send(None)\n    producer = produce(consumer)\n\n    for _ in range(10):\n        print('Producing...')\n        next(producer)", 
            "title": "Round-up"
        }, 
        {
            "location": "/basic_syntax_yield/#remember", 
            "text": "There are a few key ideas I hope you take away from this discussion:   generators are used to generate a series of values  yield is like the return of generator functions  The only other thing yield does is save the \"state\" of a generator function  A generator is just a special type of iterator  Like iterators, we can get the next value from a generator using next()  for gets values by calling next() implicitly", 
            "title": "Remember..."
        }, 
        {
            "location": "/data_number/", 
            "text": "Number\n\n\n1\n1.2\n1 + 2\nabs(-5)", 
            "title": "Number"
        }, 
        {
            "location": "/data_number/#number", 
            "text": "1\n1.2\n1 + 2\nabs(-5)", 
            "title": "Number"
        }, 
        {
            "location": "/data_string/", 
            "text": "Format\n\n\n'{0}, {1}, {2}'.format('a', 'b', 'c')\n# 'a, b, c'", 
            "title": "String"
        }, 
        {
            "location": "/data_string/#format", 
            "text": "'{0}, {1}, {2}'.format('a', 'b', 'c')\n# 'a, b, c'", 
            "title": "Format"
        }, 
        {
            "location": "/data_object/", 
            "text": "Convert dict to object\n\n\n1\n\n\nclass Struct:\n    def __init__(self, **entries):\n        self.__dict__.update(entries)\n\n\n\n\nThen, you can use\n\n\n args = {'a': 1, 'b': 2}\n\n s = Struct(**args)\n\n s\n\n __main__.Struct instance at 0x01D6A738 \n\n\n s.a\n1\n\n s.b\n2\n\n\n\n\n\n\n\n\n\n\n\n\nstackoverflow, Convert Python dict to object?", 
            "title": "Object"
        }, 
        {
            "location": "/data_object/#convert-dict-to-object", 
            "text": "1  class Struct:\n    def __init__(self, **entries):\n        self.__dict__.update(entries)  Then, you can use   args = {'a': 1, 'b': 2}  s = Struct(**args)  s  __main__.Struct instance at 0x01D6A738    s.a\n1  s.b\n2      stackoverflow, Convert Python dict to object?", 
            "title": "Convert dict to object"
        }, 
        {
            "location": "/data_collection/", 
            "text": "List\n\n\na = [1, 2, 3]\n\n\n\n\nReverse a list\n\n\n[1, 3, 2][::-1]\n# [2, 3, 1]\n\n\n\n\nItertools\n\n\nimport itertools\n\nx = [1, 2, 3]\ny = [2, 4, 5]\n\n[a + b for (a, b) in itertools.product(x, y)]\n# [3, 5, 6, 4, 6, 7, 5, 7, 8]\n\n\n\n\nDictionary\n\n\ndict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}\n\nprint \ndict['Name']: \n, dict['Name']\nprint \ndict['Age']: \n, dict['Age']\n\n\n\n\nUpdate dictionary\n\n\ndict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}\n\ndict['Age'] = 8; # update existing entry\ndict['School'] = \nDPS School\n; # Add new entry\n\n\nprint \ndict['Age']: \n, dict['Age']\nprint \ndict['School']: \n, dict['School']\n\n\n\n\nDelete dictionary elements\n\n\ndict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}\n\ndel dict['Name']; # remove entry with key 'Name'\ndict.clear();     # remove all entries in dict\ndel dict ;        # delete entire dictionary\n\nprint \ndict['Age']: \n, dict['Age']\nprint \ndict['School']: \n, dict['School']", 
            "title": "Collection"
        }, 
        {
            "location": "/data_collection/#list", 
            "text": "a = [1, 2, 3]", 
            "title": "List"
        }, 
        {
            "location": "/data_collection/#reverse-a-list", 
            "text": "[1, 3, 2][::-1]\n# [2, 3, 1]", 
            "title": "Reverse a list"
        }, 
        {
            "location": "/data_collection/#itertools", 
            "text": "import itertools\n\nx = [1, 2, 3]\ny = [2, 4, 5]\n\n[a + b for (a, b) in itertools.product(x, y)]\n# [3, 5, 6, 4, 6, 7, 5, 7, 8]", 
            "title": "Itertools"
        }, 
        {
            "location": "/data_collection/#dictionary", 
            "text": "dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}\n\nprint  dict['Name']:  , dict['Name']\nprint  dict['Age']:  , dict['Age']  Update dictionary  dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}\n\ndict['Age'] = 8; # update existing entry\ndict['School'] =  DPS School ; # Add new entry\n\n\nprint  dict['Age']:  , dict['Age']\nprint  dict['School']:  , dict['School']  Delete dictionary elements  dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}\n\ndel dict['Name']; # remove entry with key 'Name'\ndict.clear();     # remove all entries in dict\ndel dict ;        # delete entire dictionary\n\nprint  dict['Age']:  , dict['Age']\nprint  dict['School']:  , dict['School']", 
            "title": "Dictionary"
        }, 
        {
            "location": "/data_time/", 
            "text": "Datetime\n\n\nPrint current time \n1\n\n\nfrom datetime import datetime\ndatetime.now().strftime('%Y-%m-%d %H:%M:%S')\n# '2015-12-29 14:02:27'\n\n\n\n\nGet current time \n1\n\n\nimport datetime\ndatetime.datetime.now()\n# datetime(2009, 1, 6, 15, 8, 24, 78915)\n\n\n\n\nUnixtime \n2\n\n\nimport time\nint(time.time())\n\n\n\n\n\n\n\n\n\n\n\n\nHow to get current time in Python\n\n\n\n\n\n\nDoes Python's time.time() return the local or UTC timestamp?", 
            "title": "Time"
        }, 
        {
            "location": "/data_time/#datetime", 
            "text": "Print current time  1  from datetime import datetime\ndatetime.now().strftime('%Y-%m-%d %H:%M:%S')\n# '2015-12-29 14:02:27'  Get current time  1  import datetime\ndatetime.datetime.now()\n# datetime(2009, 1, 6, 15, 8, 24, 78915)  Unixtime  2  import time\nint(time.time())      How to get current time in Python    Does Python's time.time() return the local or UTC timestamp?", 
            "title": "Datetime"
        }, 
        {
            "location": "/oop/", 
            "text": "Object Oriented Programming\n\n\n1\n\n\nclass BankAccount:\n  id = None\n  balance = 0\n\n  def __init__(self, id, balance=0):\n    self.id = id\n    self.balance = balance\n\n  def __get_balance():\n     pass\n  def withdraw():\n     pass\n   def deposite():\n     pass\n\n\n\n\nObject\n\n\nConvert dict to object \n1\n\n\nclass Struct:\n    def __init__(self, **entries):\n        self.__dict__.update(entries)\n\n\n\n\nThen, you can use\n\n\n args = {'a': 1, 'b': 2}\n\n s = Struct(**args)\n\n s\n\n __main__.Struct instance at 0x01D6A738 \n\n\n s.a\n1\n\n s.b\n2\n\n\n\n\n\n\n\n\n\n\n\n\nstackoverflow, Convert Python dict to object?", 
            "title": "OOP"
        }, 
        {
            "location": "/oop/#object-oriented-programming", 
            "text": "1  class BankAccount:\n  id = None\n  balance = 0\n\n  def __init__(self, id, balance=0):\n    self.id = id\n    self.balance = balance\n\n  def __get_balance():\n     pass\n  def withdraw():\n     pass\n   def deposite():\n     pass", 
            "title": "Object Oriented Programming"
        }, 
        {
            "location": "/oop/#object", 
            "text": "Convert dict to object  1  class Struct:\n    def __init__(self, **entries):\n        self.__dict__.update(entries)  Then, you can use   args = {'a': 1, 'b': 2}  s = Struct(**args)  s  __main__.Struct instance at 0x01D6A738    s.a\n1  s.b\n2      stackoverflow, Convert Python dict to object?", 
            "title": "Object"
        }, 
        {
            "location": "/os/", 
            "text": "OS\n\n\nFile Operations\n\n\nCopy folder \n1\n\n\nimport shutil\nshutil.copyfile(\nsrc\n, \ndst\n)\n\n\n\n\nCLI\n\n\n\n\n\n\n\n\n\n\nshutil \u2014 High-level file operations", 
            "title": "OS"
        }, 
        {
            "location": "/os/#os", 
            "text": "", 
            "title": "OS"
        }, 
        {
            "location": "/os/#file-operations", 
            "text": "Copy folder  1  import shutil\nshutil.copyfile( src ,  dst )", 
            "title": "File Operations"
        }, 
        {
            "location": "/os/#cli", 
            "text": "shutil \u2014 High-level file operations", 
            "title": "CLI"
        }, 
        {
            "location": "/networking/", 
            "text": "REST\n\n\nJSON \n1\n \n2\n\n\nGET\n\n\nimport requests\nurl = \nhttp://localhost:8080/messages\n\nresponse = requests.get(url)\ndata = response.json()\n\n\n\n\nPOST\n \n3\n\n\nimport requests\nimport json\n\nurl = \nhttp://localhost:8080/messages\n\ndata = {'sender': 'Alice', 'receiver': 'Bob', 'message': 'Hello!'}\nheaders = {\n  'Content-type': 'application/json',\n  'Accept': 'application/json'}\nr = requests.post(url, data=json.dumps(data), headers=headers)\n\n\n\n\n\n\n\n\n\n\n\n\nHow to get JSON from webpage into Python script\n\n\n\n\n\n\nRequests: HTTP for Humans\n\n\n\n\n\n\nPost JSON using Python Requests", 
            "title": "Networking"
        }, 
        {
            "location": "/networking/#rest", 
            "text": "", 
            "title": "REST"
        }, 
        {
            "location": "/networking/#json-1-2", 
            "text": "GET  import requests\nurl =  http://localhost:8080/messages \nresponse = requests.get(url)\ndata = response.json()  POST   3  import requests\nimport json\n\nurl =  http://localhost:8080/messages \ndata = {'sender': 'Alice', 'receiver': 'Bob', 'message': 'Hello!'}\nheaders = {\n  'Content-type': 'application/json',\n  'Accept': 'application/json'}\nr = requests.post(url, data=json.dumps(data), headers=headers)      How to get JSON from webpage into Python script    Requests: HTTP for Humans    Post JSON using Python Requests", 
            "title": "JSON 1 2"
        }, 
        {
            "location": "/io/", 
            "text": "Read JSON \n1\n\n\nimport json\nfrom pprint import pprint\n\nwith open('data.json') as data_file:\n    data = json.load(data_file)\n\npprint(data)\n\n\n\n\n\n\n\n\n\n\n\n\nParsing values from a JSON file in Python", 
            "title": "IO"
        }, 
        {
            "location": "/io/#read-json-1", 
            "text": "import json\nfrom pprint import pprint\n\nwith open('data.json') as data_file:\n    data = json.load(data_file)\n\npprint(data)      Parsing values from a JSON file in Python", 
            "title": "Read JSON 1"
        }, 
        {
            "location": "/event_based/", 
            "text": "Introduction: \npydispatcher\n \n1\n \n2\n\n\nPyDispatcher provides the Python programmer with a \nmultiple-producer-multiple-consumer signal-registration\n and \nrouting infrastructure\n for use in multiple contexts.  The mechanism of PyDispatcher started life as a highly rated recipe in the Python Cookbook.  The project aims to include various enhancements to the recipe developed during use in various applications.  It is primarily maintained by Mike Fletcher.  A derivative of the project provides the Django web framework's \"signal\" system.\n\n\nUsed by Django community\n\n\nUsage \n1\n\n\n# To set up a function to receive signals:\nfrom pydispatch import dispatcher\n\nSIGNAL = 'my-first-signal'\n\n\ndef handle_event(sender):\n    \nSimple event handler\n\n    print 'Signal was sent by', sender\n\n\ndispatcher.connect(handle_event, signal=SIGNAL, sender=dispatcher.Any)\n\n# The use of the Any object allows the handler to listen for messages\n# from any Sender or to listen to Any message being sent.\n# To send messages:\nfirst_sender = object()\nsecond_sender = {}\n\n\ndef main():\n    dispatcher.send(signal=SIGNAL, sender=first_sender)\n    dispatcher.send(signal=SIGNAL, sender=second_sender)\n\n    # Which causes the following to be printed:\n\n    # Signal was sent by \nobject object at 0x196a090\n\n    # Signal was sent by {}\n\n\n\n\nMessaging\n\n\nConda link\n\n\nDocker link\n\n\nGithub - pubSubService\n\n\nGithub - pubSubClient\n\n\nPypi link\n\n\nPython Publish - Subscribe Pattern Implementation:\n\n\nStep by Step to run PubSub:\n\n\nStep 1: Pull \npubsub\n image from docker hub \n run it:\n\n\ndocker pull hunguyen/pubsub:latest\ndocker run -d -p 8000:8000 hunguyen/pubsub\n\n\n\n\nStep 2: To run client first install \npyconfiguration\n from conda\n\n\nconda install -c rain1024 pyconfiguration\n\n\n\n\nStep 3: Install \npubSubClient\n package from conda\n\n\nconda install -c hunguyen pubsubclient\n\n\n\n\nStep 4: Create \nconfig.json\n file\n\n\n{\n  \nPUBLISH_SUBSCRIBE_SERVICE\n: \nhttp://api.service.com\n\n}\n\n\n\n\nStep 5: Run \npubsubclient\n\n\n# create and register or sync a publisher\npublisher = Publisher('P1')\n# create a new topic\ntopic = Topic('A')\n# create an event of a topic\nevent = Event(topic)\n# publisher publishes an event\npublisher.publish(event)\n# create and register or sync a subscriber\nsubscriber = Subscriber('S1')\n# subscriber subscribes to a topic\nsubscriber.subscribe(topic)\n# subscriber get all new events by time stamp of topics which it has subscribed\nevents = subscriber.get_events()\n\n\n\n\n\n\n\n\n\n\n\n\npydispatcher\n\n\n\n\n\n\nstackoverflow, Recommended Python publish/subscribe/dispatch module?", 
            "title": "Event Based"
        }, 
        {
            "location": "/event_based/#introduction-pydispatcher-1-2", 
            "text": "PyDispatcher provides the Python programmer with a  multiple-producer-multiple-consumer signal-registration  and  routing infrastructure  for use in multiple contexts.  The mechanism of PyDispatcher started life as a highly rated recipe in the Python Cookbook.  The project aims to include various enhancements to the recipe developed during use in various applications.  It is primarily maintained by Mike Fletcher.  A derivative of the project provides the Django web framework's \"signal\" system.  Used by Django community", 
            "title": "Introduction: pydispatcher 1 2"
        }, 
        {
            "location": "/event_based/#usage-1", 
            "text": "# To set up a function to receive signals:\nfrom pydispatch import dispatcher\n\nSIGNAL = 'my-first-signal'\n\n\ndef handle_event(sender):\n     Simple event handler \n    print 'Signal was sent by', sender\n\n\ndispatcher.connect(handle_event, signal=SIGNAL, sender=dispatcher.Any)\n\n# The use of the Any object allows the handler to listen for messages\n# from any Sender or to listen to Any message being sent.\n# To send messages:\nfirst_sender = object()\nsecond_sender = {}\n\n\ndef main():\n    dispatcher.send(signal=SIGNAL, sender=first_sender)\n    dispatcher.send(signal=SIGNAL, sender=second_sender)\n\n    # Which causes the following to be printed:\n\n    # Signal was sent by  object object at 0x196a090 \n    # Signal was sent by {}", 
            "title": "Usage 1"
        }, 
        {
            "location": "/event_based/#messaging", 
            "text": "Conda link  Docker link  Github - pubSubService  Github - pubSubClient  Pypi link  Python Publish - Subscribe Pattern Implementation:", 
            "title": "Messaging"
        }, 
        {
            "location": "/event_based/#step-by-step-to-run-pubsub", 
            "text": "", 
            "title": "Step by Step to run PubSub:"
        }, 
        {
            "location": "/event_based/#step-1-pull-pubsub-image-from-docker-hub-run-it", 
            "text": "docker pull hunguyen/pubsub:latest\ndocker run -d -p 8000:8000 hunguyen/pubsub", 
            "title": "Step 1: Pull pubsub image from docker hub &amp; run it:"
        }, 
        {
            "location": "/event_based/#step-2-to-run-client-first-install-pyconfiguration-from-conda", 
            "text": "conda install -c rain1024 pyconfiguration", 
            "title": "Step 2: To run client first install pyconfiguration from conda"
        }, 
        {
            "location": "/event_based/#step-3-install-pubsubclient-package-from-conda", 
            "text": "conda install -c hunguyen pubsubclient", 
            "title": "Step 3: Install pubSubClient package from conda"
        }, 
        {
            "location": "/event_based/#step-4-create-configjson-file", 
            "text": "{\n   PUBLISH_SUBSCRIBE_SERVICE :  http://api.service.com \n}", 
            "title": "Step 4: Create config.json file"
        }, 
        {
            "location": "/event_based/#step-5-run-pubsubclient", 
            "text": "# create and register or sync a publisher\npublisher = Publisher('P1')\n# create a new topic\ntopic = Topic('A')\n# create an event of a topic\nevent = Event(topic)\n# publisher publishes an event\npublisher.publish(event)\n# create and register or sync a subscriber\nsubscriber = Subscriber('S1')\n# subscriber subscribes to a topic\nsubscriber.subscribe(topic)\n# subscriber get all new events by time stamp of topics which it has subscribed\nevents = subscriber.get_events()      pydispatcher    stackoverflow, Recommended Python publish/subscribe/dispatch module?", 
            "title": "Step 5: Run pubsubclient"
        }, 
        {
            "location": "/logging/", 
            "text": "logging \n1\n  \n2\n  \n3\n\n\nlevels\n, \nattributes\n references\n\n\nThe logging library takes a modular approach and offers several categories of components: loggers, handlers, filters, and formatters.\n\n\n\n\nLoggers expose the interface that application code directly uses.\n\n\nHandlers send the log records (created by loggers) to the appropriate destination.\n\n\nFilters provide a finer grained facility for determining which log records to output.\n\n\nFormatters specify the layout of log records in the final output.\n\n\n\n\nStep 0: Project structure\n\n\ncode/\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 config\n\u251c   \u2514\u2500\u2500 logging.conf\n\u2514\u2500\u2500 logs\n    \u2514\u2500\u2500 app.log\n\n\n\n\nStep 1: Create file \nlogging.conf\n\n\n[loggers]\nkeys=root\n\n[handlers]\nkeys=consoleHandler,fileHandler\n\n[formatters]\nkeys=formatter\n\n[logger_root]\nlevel=DEBUG\nhandlers=consoleHandler,fileHandler\n\n[handler_consoleHandler]\nclass=StreamHandler\nlevel=DEBUG\nformatter=formatter\nargs=(sys.stdout,)\n\n[handler_fileHandler]\nclass=FileHandler\nlevel=DEBUG\nformatter=formatter\nargs = ('logs/app.log','a')\n\n[formatter_formatter]\nformat=%(asctime)s - %(name)s - %(levelname)s - %(message)s\ndatefmt=\n\n\n\n\nStep 2: Load config and create logger\n\n\nIn \nmain.py\n\n\nimport logging.config\n\n# load logging config\nlogging.config.fileConfig('config/logging.conf')\n\n\n\n\nStep 3: In your application code\n\n\nlogging.getLogger().debug('debug message')\nlogging.getLogger().info('info message')\nlogging.getLogger().warn('warn message')\nlogging.getLogger().error('error message')\nlogging.getLogger().critical('critical message')\n\n\n\n\nMore Resources\n\n\n\n\nIntroduction to Logging\n\n\nQuick and simple usage of python log\n\n\n\n\n\n\n\n\n\n\n\n\nPython: Logging module\n\n\n\n\n\n\nPython: Logging cookbook\n\n\n\n\n\n\nPython: Logging guide", 
            "title": "Logging"
        }, 
        {
            "location": "/logging/#logging-1-2-3", 
            "text": "levels ,  attributes  references  The logging library takes a modular approach and offers several categories of components: loggers, handlers, filters, and formatters.   Loggers expose the interface that application code directly uses.  Handlers send the log records (created by loggers) to the appropriate destination.  Filters provide a finer grained facility for determining which log records to output.  Formatters specify the layout of log records in the final output.   Step 0: Project structure  code/\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 config\n\u251c   \u2514\u2500\u2500 logging.conf\n\u2514\u2500\u2500 logs\n    \u2514\u2500\u2500 app.log  Step 1: Create file  logging.conf  [loggers]\nkeys=root\n\n[handlers]\nkeys=consoleHandler,fileHandler\n\n[formatters]\nkeys=formatter\n\n[logger_root]\nlevel=DEBUG\nhandlers=consoleHandler,fileHandler\n\n[handler_consoleHandler]\nclass=StreamHandler\nlevel=DEBUG\nformatter=formatter\nargs=(sys.stdout,)\n\n[handler_fileHandler]\nclass=FileHandler\nlevel=DEBUG\nformatter=formatter\nargs = ('logs/app.log','a')\n\n[formatter_formatter]\nformat=%(asctime)s - %(name)s - %(levelname)s - %(message)s\ndatefmt=  Step 2: Load config and create logger  In  main.py  import logging.config\n\n# load logging config\nlogging.config.fileConfig('config/logging.conf')  Step 3: In your application code  logging.getLogger().debug('debug message')\nlogging.getLogger().info('info message')\nlogging.getLogger().warn('warn message')\nlogging.getLogger().error('error message')\nlogging.getLogger().critical('critical message')  More Resources   Introduction to Logging  Quick and simple usage of python log       Python: Logging module    Python: Logging cookbook    Python: Logging guide", 
            "title": "logging 1  2  3"
        }, 
        {
            "location": "/configuration/", 
            "text": "Configuration\n\n\npyconfiguration\n\n\nInstallation\n\n\nconda install -c rain1024 pyconfiguration\n\n\n\n\nUsage\n\n\nStep 1: Create \nconfig.json\n file\n\n\n{\n  \nSERVICE_URL\n: \nhttp://api.service.com\n\n}\n\n\n\n\nStep 2: Add these code to \nmain.py\n file\n\n\nfrom pyconfiguration import Configuration\nConfiguration.load('config.json')\nprint Configuration.SERVICE_URL\n\n\n http://api.service.com\n\n\n\n\nReferences: What's the best practice using a settings file \n1\n\n\n\n\n\n\n\n\n\n\nWhat's the best practice using a settings file in Python?", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#configuration", 
            "text": "pyconfiguration", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#installation", 
            "text": "conda install -c rain1024 pyconfiguration", 
            "title": "Installation"
        }, 
        {
            "location": "/configuration/#usage", 
            "text": "Step 1: Create  config.json  file  {\n   SERVICE_URL :  http://api.service.com \n}  Step 2: Add these code to  main.py  file  from pyconfiguration import Configuration\nConfiguration.load('config.json')\nprint Configuration.SERVICE_URL  http://api.service.com  References: What's the best practice using a settings file  1      What's the best practice using a settings file in Python?", 
            "title": "Usage"
        }, 
        {
            "location": "/web/", 
            "text": "Django \n1\n\n\nDjango is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. It\u2019s free and open source.\n\n\nProject Folder Structure\n\n\nproject_folder/\n\u251c\u2500\u2500 your_project_name/\n\u2502   \u251c\u2500\u2500 your_project_name/\n\u2502   \u2502   \u251c\u2500\u2500 static/\n\u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2502   \u251c\u2500\u2500 serializers.py\n\u2502   \u2502   \u251c\u2500\u2500 settings.py\n\u2502   \u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2502   \u2514\u2500\u2500 views.py\n\u2514   \u2514\u2500\u2500 manage.py\n\n\n\n\nCreate (and use) REST API in 5 (+1) steps \n1\n \n2\n\n\nStep 1: Install dependencies\n\n\npip install django\npip install djangorestframework\npip install markdown             # Markdown support for the browsable API.\npip install django-filter        # Filtering support\npip install django-cors-headers  # CORS support\n\n\n\n\nStep 2: Create project\n\n\ndjango-admin startproject your_project_name\n\n\n\n\nStep 3: Config apps \n3\n\n\nAdd 'your_project_name', 'rest_framework' to your INSTALLED_APPS setting in \nyour_project_name/settings.py\n file\n\n\nINSTALLED_APPS = (\n    ...\n    'your_project_name'\n    'rest_framework',\n)\n\n\n\n\nStep 4: \nModel\n, \nView\n, \nRoute\n \n6\n\n\nStep 4.1: Create model and serializer\n\n\nYou can go to \nDjango: Model field reference page\n for more fields.\n\n\nStep 4.1.1: Create \nTask\n class in \nyour_project_name/models.py\n file\n\n\nfrom django.db import models\n\nclass Task(models.Model):\n    content = models.CharField(max_length=30)\n    status = models.CharField(max_length=30)\n\n\n\n\nStep 4.1.2: Create \nTaskSerializer\n class in \nyour_project_name/serializers.py\n file\n\n\nfrom your_project_name.models import Task\nfrom rest_framework import serializers\n\nclass TaskSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Task\n        fields = ('id', 'content', 'status')\n\n\n\n\nStep 4.1.3: Create table in database \n4\n\n\npython manage.py syncdb\n\n\n\n\nWith \ndjango 1.9\n\n\npython manage.py makemigrations your_project_name\npython manage.py migrate\n\n\n\n\nStep 4.2: Create \nTaskViewSet\n class in \nyour_project_name/views.py\n file\n\n\nfrom your_project_name.models import Task\nfrom your_project_name.serializers import TaskSerializer\nfrom rest_framework import viewsets\n\nclass TaskViewSet(viewsets.ModelViewSet):\n    queryset = Task.objects.all()\n    serializer_class = TaskSerializer\n\n\n\n\nStep 4.3: Config \nroute\n \n5\n\n\nChange \nyour_project_name/urls.py\n file\n\n\nfrom django.conf.urls import include, url\nfrom django.contrib import admin\nfrom rest_framework import routers\nfrom your_project_name.views import TaskViewSet\n\nrouter = routers.DefaultRouter()\nrouter.register(r'api/tasks', TaskViewSet)\nadmin.autodiscover()\n\nurlpatterns = [\n    url(r'^admin/', include(admin.site.urls)),\n    url(r'^', include(router.urls)),\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]\n\n\n\n\nStep 5: Run Server\n\n\npython manage.py runserver\n\n\n\n\nStep 6. Use API\n\n\nStep 6.1: Create a new task\n\n\ncurl -i -X POST -H \nContent-Type:application/json\n http://localhost:8000/api/tasks -d '{\n  \ncontent\n: \na\n,\n  \nstatus\n: \nINIT\n\n}'\n\n\n\n\nStep 6.2: List all tasks\n\n\ncurl http://localhost:8000/api/tasks\n\n\n\n\nStep 6.3: Get detail of task 1\n\n\ncurl http://localhost:8000/api/tasks/1\n\n\n\n\nStep 6.4: Delete task 1\n\n\ncurl -i -X DELETE http://localhost:8000/api/tasks/1\n\n\n\n\nStep 7: CORS\n\n\nKnown Error: \nNo 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access.\n\n\nStep 7.1: Install \ncorsheader\n app\n\n\nAdd module \ncorsheaders\n to \nyour_project_name/settings.py\n\n\nINSTALLED_APPS = (\n    ...\n    'corsheaders',\n    ...\n)\n\n\n\n\nStep 7.2 Add middleware classes\n\n\nAdd middleware_classes to \nyour_project_name/settings.py\n\n\nMIDDLEWARE_CLASSES = (\n    ...\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    ...\n)\n\n\n\n\nStep 7.3 Configuration CORS Setting\n\n\nOption 1\n: Allow All\n\n\nAdd this line to \nyour_project_name/settings.py\n\n\nCORS_ORIGIN_ALLOW_ALL: True\n\n\n\n\nStep 8: https\n\n\nYou can use \nhttps://github.com/teddziuba/django-sslserver\n\n\nUnicode\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    )\n}\n\n\n\n\nStep 9: Paging\n\n\nAdd this module setting to \nyour_project_name/settings.py\n\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',\n}\n\n\n\n\n\nAPI:\n\n\n\nGET \n/?limit=\nlimit\noffset=\noffset\n\n\n\n\n\n\nStep 10: Search by field in\n\n\nimport this to your \nviewsets.py\n\n\n\nfrom rest_framework import filters\n\n\n\n\n\nadd this to your viewsets class\n\n\n\nfilter_backends = (filters.SearchFilter, )\nsearch_fields = ('\nfield\n','\nfield\n',)\n\n\n\n\n\nOne-to-Many Relationship \n7\n\n\nfrom django.db import models\n\nclass User(models.Model):\n    name = models.TextField()\n\n    def __str__(self):\n        return \n{} - {}\n.format(str(self.id), self.name)\n\n\nclass Task(models.Model):\n    name = models.TextField()\n    assign = models.ForeignKey(User, on_delete=models.CASCADE)\n\n\n\n\nStarting with Mysql\n\n\nAdd this database settings to \nyour_project_name/settings.py\n\n\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': '[DB_NAME]',\n        'USER': '[DB_USER]',\n        'PASSWORD': '[PASSWORD]',\n        'HOST': '[HOST]',   # Or an IP Address that your DB is hosted on\n        'PORT': '3306',\n    }\n}\n\n\n\n\n\nInstall this module to your virtual environment\n\n\n\nconda install mysql-python #if you are using virtual environment\n\npip install mysql-python #if you using are root environment\n\n\n\n\n\nCustom View \n8\n\n\nfrom rest_framework import mixins\n\n\nclass CreateModelMixin(object):\n    \n\n    Create a model instance.\n    \n\n    def create(self, request, *args, **kwargs):\n        event = request.data\n        try:\n            event['time'] = int(time.time())\n        except Exception, e:\n            print 'Set Time Error'\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        self.perform_create(serializer)\n        headers = self.get_success_headers(serializer.data)\n        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\n\n    def perform_create(self, serializer):\n        serializer.save()\n\n    def get_success_headers(self, data):\n        try:\n            return {'Location': data[api_settings.URL_FIELD_NAME]}\n        except (TypeError, KeyError):\n            return {}\n\nclass YourViewSet(CreateModelMixin,\n                  mixins.RetrieveModelMixin,\n                  mixins.UpdateModelMixin,\n                  mixins.DestroyModelMixin,\n                  mixins.ListModelMixin,\n                  GenericViewSet):\n    queryset = YourModel.objects.all()\n    serializer_class = YourModelSerializer\n\n\n\n\nLogging settings\n\n\nHere is an example, put this settings dict into your \nsettings.py\n file:\n\n\n\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {\n            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'\n        },\n        'simple': {\n            'format': '%(levelname)s %(message)s'\n        },\n    },\n    'filters': {\n        'special': {\n            '()': 'project.logging.SpecialFilter',\n            'foo': 'bar',\n        },\n        'require_debug_true': {\n            '()': 'django.utils.log.RequireDebugTrue',\n        },\n    },\n    'handlers': {\n        'console': {\n            'level': 'INFO',\n            'filters': ['require_debug_true'],\n            'class': 'logging.StreamHandler',\n            'formatter': 'simple'\n        },\n        'mail_admins': {\n            'level': 'ERROR',\n            'class': 'django.utils.log.AdminEmailHandler',\n            'filters': ['special']\n        }\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['console'],\n            'propagate': True,\n        },\n        'django.request': {\n            'handlers': ['mail_admins'],\n            'level': 'ERROR',\n            'propagate': False,\n        },\n        'myproject.custom': {\n            'handlers': ['console', 'mail_admins'],\n            'level': 'INFO',\n            'filters': ['special']\n        }\n    }\n}\n\n\n\n\n\nPython: Build Python API Client package\n\n\nStep 1: Write document on \nSwagger Editor\n1\n\n\nStep 2: Genenrate Client --\n Python --\n save \npython-client.zip\n\n\nStep 3: Extract \nzip\n\n\nStep 4: Open project in \nPycharm\n rename \nproject directory\n, \nproject name\n, \nswagger_client\n package\n\n\nStep 5: \n2\n\n\nmkdir conda\ncd conda\ngit clone https://github.com/hunguyen1702/condaBuildLocalTemplate.git\nmv condaBuildLocalTemplate your_package_name\nrm -rf .git README.md\n\n\n\n\nStep 6: Edit \nmeta.yaml\n file in \nyour_package\n folder\n\n\n6.1 Follow instruction inside \nmeta.yaml\n\n\n6.2 Replace these line\n\n\nrequirements:\n  build:\n    - python\n    - setuptools\n  run:\n    - python\n\n\n\n\nwith:\n\n\nrequirements:\n  build:\n    - python\n    - setuptools\n    - six\n    - certifi\n    - python-dateutil\n  run:\n    - python\n    - six\n    - certifi\n    - python-dateutil\n\n\n\n\nStep 7:\n\n\ncd ..\nconda build your_package\n\n\n\n\nStep 8:\n\n\nmkdir channel\ncd channel\nconda convert --platform all ~/anaconda/conda-bld/linux-64/your_package_0.1.0-py27_0.tar.bz2\n\n\n\n\nStep 9: Create \nvirtual-env\n\n\nname: your_env_name\ndependencies:\n- certifi=2016.2.28=py27_0\n- openssl=1.0.2h=0\n- pip=8.1.2=py27_0\n- python=2.7.11=0\n- python-dateutil=2.5.3=py27_0\n- readline=6.2=2\n- setuptools=20.7.0=py27_0\n- six=1.10.0=py27_0\n- tk=8.5.18=0\n- wheel=0.29.0=py27_0\n- zlib=1.2.8=0\n- pip:\n  - urllib3==1.15.1\n\n\n\n\nStep 10: Install:\n\n\nconda install --use-local your_package\n\n\n\n\n\n\n\n\n\n\n\n\nDjango\n\n\n\n\n\n\nWriting your first Django app, part 1\n\n\n\n\n\n\nDjango REST framework: Installation\n\n\n\n\n\n\nDjango: Migrations\n\n\n\n\n\n\nBuilding a Simple REST API for Mobile Applications\n\n\n\n\n\n\nDjango: Models\n\n\n\n\n\n\nHow to show object details in Django Rest Framework browseable API?\n\n\n\n\n\n\nrest_framework:mixins", 
            "title": "Web"
        }, 
        {
            "location": "/web/#django-1", 
            "text": "Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. It\u2019s free and open source.  Project Folder Structure  project_folder/\n\u251c\u2500\u2500 your_project_name/\n\u2502   \u251c\u2500\u2500 your_project_name/\n\u2502   \u2502   \u251c\u2500\u2500 static/\n\u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2502   \u251c\u2500\u2500 serializers.py\n\u2502   \u2502   \u251c\u2500\u2500 settings.py\n\u2502   \u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2502   \u2514\u2500\u2500 views.py\n\u2514   \u2514\u2500\u2500 manage.py", 
            "title": "Django 1"
        }, 
        {
            "location": "/web/#create-and-use-rest-api-in-5-1-steps-1-2", 
            "text": "", 
            "title": "Create (and use) REST API in 5 (+1) steps 1 2"
        }, 
        {
            "location": "/web/#step-1-install-dependencies", 
            "text": "pip install django\npip install djangorestframework\npip install markdown             # Markdown support for the browsable API.\npip install django-filter        # Filtering support\npip install django-cors-headers  # CORS support", 
            "title": "Step 1: Install dependencies"
        }, 
        {
            "location": "/web/#step-2-create-project", 
            "text": "django-admin startproject your_project_name", 
            "title": "Step 2: Create project"
        }, 
        {
            "location": "/web/#step-3-config-apps-3", 
            "text": "Add 'your_project_name', 'rest_framework' to your INSTALLED_APPS setting in  your_project_name/settings.py  file  INSTALLED_APPS = (\n    ...\n    'your_project_name'\n    'rest_framework',\n)", 
            "title": "Step 3: Config apps 3"
        }, 
        {
            "location": "/web/#step-4-model-view-route-6", 
            "text": "", 
            "title": "Step 4: Model, View, Route 6"
        }, 
        {
            "location": "/web/#step-41-create-model-and-serializer", 
            "text": "You can go to  Django: Model field reference page  for more fields.", 
            "title": "Step 4.1: Create model and serializer"
        }, 
        {
            "location": "/web/#step-411-create-task-class-in-your_project_namemodelspy-file", 
            "text": "from django.db import models\n\nclass Task(models.Model):\n    content = models.CharField(max_length=30)\n    status = models.CharField(max_length=30)", 
            "title": "Step 4.1.1: Create Task class in your_project_name/models.py file"
        }, 
        {
            "location": "/web/#step-412-create-taskserializer-class-in-your_project_nameserializerspy-file", 
            "text": "from your_project_name.models import Task\nfrom rest_framework import serializers\n\nclass TaskSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Task\n        fields = ('id', 'content', 'status')", 
            "title": "Step 4.1.2: Create TaskSerializer class in your_project_name/serializers.py file"
        }, 
        {
            "location": "/web/#step-413-create-table-in-database-4", 
            "text": "python manage.py syncdb  With  django 1.9  python manage.py makemigrations your_project_name\npython manage.py migrate", 
            "title": "Step 4.1.3: Create table in database 4"
        }, 
        {
            "location": "/web/#step-42-create-taskviewset-class-in-your_project_nameviewspy-file", 
            "text": "from your_project_name.models import Task\nfrom your_project_name.serializers import TaskSerializer\nfrom rest_framework import viewsets\n\nclass TaskViewSet(viewsets.ModelViewSet):\n    queryset = Task.objects.all()\n    serializer_class = TaskSerializer", 
            "title": "Step 4.2: Create TaskViewSet class in your_project_name/views.py file"
        }, 
        {
            "location": "/web/#step-43-config-route-5", 
            "text": "Change  your_project_name/urls.py  file  from django.conf.urls import include, url\nfrom django.contrib import admin\nfrom rest_framework import routers\nfrom your_project_name.views import TaskViewSet\n\nrouter = routers.DefaultRouter()\nrouter.register(r'api/tasks', TaskViewSet)\nadmin.autodiscover()\n\nurlpatterns = [\n    url(r'^admin/', include(admin.site.urls)),\n    url(r'^', include(router.urls)),\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]", 
            "title": "Step 4.3: Config route 5"
        }, 
        {
            "location": "/web/#step-5-run-server", 
            "text": "python manage.py runserver", 
            "title": "Step 5: Run Server"
        }, 
        {
            "location": "/web/#step-6-use-api", 
            "text": "", 
            "title": "Step 6. Use API"
        }, 
        {
            "location": "/web/#step-61-create-a-new-task", 
            "text": "curl -i -X POST -H  Content-Type:application/json  http://localhost:8000/api/tasks -d '{\n   content :  a ,\n   status :  INIT \n}'", 
            "title": "Step 6.1: Create a new task"
        }, 
        {
            "location": "/web/#step-62-list-all-tasks", 
            "text": "curl http://localhost:8000/api/tasks", 
            "title": "Step 6.2: List all tasks"
        }, 
        {
            "location": "/web/#step-63-get-detail-of-task-1", 
            "text": "curl http://localhost:8000/api/tasks/1", 
            "title": "Step 6.3: Get detail of task 1"
        }, 
        {
            "location": "/web/#step-64-delete-task-1", 
            "text": "curl -i -X DELETE http://localhost:8000/api/tasks/1", 
            "title": "Step 6.4: Delete task 1"
        }, 
        {
            "location": "/web/#step-7-cors", 
            "text": "Known Error:  No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access.", 
            "title": "Step 7: CORS"
        }, 
        {
            "location": "/web/#step-71-install-corsheader-app", 
            "text": "Add module  corsheaders  to  your_project_name/settings.py  INSTALLED_APPS = (\n    ...\n    'corsheaders',\n    ...\n)", 
            "title": "Step 7.1: Install corsheader app"
        }, 
        {
            "location": "/web/#step-72-add-middleware-classes", 
            "text": "Add middleware_classes to  your_project_name/settings.py  MIDDLEWARE_CLASSES = (\n    ...\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    ...\n)", 
            "title": "Step 7.2 Add middleware classes"
        }, 
        {
            "location": "/web/#step-73-configuration-cors-setting", 
            "text": "Option 1 : Allow All  Add this line to  your_project_name/settings.py  CORS_ORIGIN_ALLOW_ALL: True", 
            "title": "Step 7.3 Configuration CORS Setting"
        }, 
        {
            "location": "/web/#step-8-https", 
            "text": "You can use  https://github.com/teddziuba/django-sslserver", 
            "title": "Step 8: https"
        }, 
        {
            "location": "/web/#unicode", 
            "text": "REST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    )\n}", 
            "title": "Unicode"
        }, 
        {
            "location": "/web/#step-9-paging", 
            "text": "Add this module setting to  your_project_name/settings.py  \nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',\n}  API:  \nGET  /?limit= limit offset= offset", 
            "title": "Step 9: Paging"
        }, 
        {
            "location": "/web/#step-10-search-by-field-in", 
            "text": "import this to your  viewsets.py  \nfrom rest_framework import filters  add this to your viewsets class  \nfilter_backends = (filters.SearchFilter, )\nsearch_fields = (' field ',' field ',)", 
            "title": "Step 10: Search by field in"
        }, 
        {
            "location": "/web/#one-to-many-relationship-7", 
            "text": "from django.db import models\n\nclass User(models.Model):\n    name = models.TextField()\n\n    def __str__(self):\n        return  {} - {} .format(str(self.id), self.name)\n\n\nclass Task(models.Model):\n    name = models.TextField()\n    assign = models.ForeignKey(User, on_delete=models.CASCADE)", 
            "title": "One-to-Many Relationship 7"
        }, 
        {
            "location": "/web/#starting-with-mysql", 
            "text": "Add this database settings to  your_project_name/settings.py  \nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': '[DB_NAME]',\n        'USER': '[DB_USER]',\n        'PASSWORD': '[PASSWORD]',\n        'HOST': '[HOST]',   # Or an IP Address that your DB is hosted on\n        'PORT': '3306',\n    }\n}  Install this module to your virtual environment  \nconda install mysql-python #if you are using virtual environment\n\npip install mysql-python #if you using are root environment", 
            "title": "Starting with Mysql"
        }, 
        {
            "location": "/web/#custom-view-8", 
            "text": "from rest_framework import mixins\n\n\nclass CreateModelMixin(object):\n     \n    Create a model instance.\n     \n    def create(self, request, *args, **kwargs):\n        event = request.data\n        try:\n            event['time'] = int(time.time())\n        except Exception, e:\n            print 'Set Time Error'\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        self.perform_create(serializer)\n        headers = self.get_success_headers(serializer.data)\n        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\n\n    def perform_create(self, serializer):\n        serializer.save()\n\n    def get_success_headers(self, data):\n        try:\n            return {'Location': data[api_settings.URL_FIELD_NAME]}\n        except (TypeError, KeyError):\n            return {}\n\nclass YourViewSet(CreateModelMixin,\n                  mixins.RetrieveModelMixin,\n                  mixins.UpdateModelMixin,\n                  mixins.DestroyModelMixin,\n                  mixins.ListModelMixin,\n                  GenericViewSet):\n    queryset = YourModel.objects.all()\n    serializer_class = YourModelSerializer", 
            "title": "Custom View 8"
        }, 
        {
            "location": "/web/#logging-settings", 
            "text": "Here is an example, put this settings dict into your  settings.py  file:  \nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {\n            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'\n        },\n        'simple': {\n            'format': '%(levelname)s %(message)s'\n        },\n    },\n    'filters': {\n        'special': {\n            '()': 'project.logging.SpecialFilter',\n            'foo': 'bar',\n        },\n        'require_debug_true': {\n            '()': 'django.utils.log.RequireDebugTrue',\n        },\n    },\n    'handlers': {\n        'console': {\n            'level': 'INFO',\n            'filters': ['require_debug_true'],\n            'class': 'logging.StreamHandler',\n            'formatter': 'simple'\n        },\n        'mail_admins': {\n            'level': 'ERROR',\n            'class': 'django.utils.log.AdminEmailHandler',\n            'filters': ['special']\n        }\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['console'],\n            'propagate': True,\n        },\n        'django.request': {\n            'handlers': ['mail_admins'],\n            'level': 'ERROR',\n            'propagate': False,\n        },\n        'myproject.custom': {\n            'handlers': ['console', 'mail_admins'],\n            'level': 'INFO',\n            'filters': ['special']\n        }\n    }\n}", 
            "title": "Logging settings"
        }, 
        {
            "location": "/web/#python-build-python-api-client-package", 
            "text": "", 
            "title": "Python: Build Python API Client package"
        }, 
        {
            "location": "/web/#step-1-write-document-on-swagger-editor1", 
            "text": "", 
            "title": "Step 1: Write document on Swagger Editor1"
        }, 
        {
            "location": "/web/#step-2-genenrate-client-python-save-python-clientzip", 
            "text": "", 
            "title": "Step 2: Genenrate Client --&gt; Python --&gt; save python-client.zip"
        }, 
        {
            "location": "/web/#step-3-extract-zip", 
            "text": "", 
            "title": "Step 3: Extract zip"
        }, 
        {
            "location": "/web/#step-4-open-project-in-pycharm-rename-project-directory-project-name-swagger_client-package", 
            "text": "", 
            "title": "Step 4: Open project in Pycharm rename project directory, project name, swagger_client package"
        }, 
        {
            "location": "/web/#step-5-2", 
            "text": "mkdir conda\ncd conda\ngit clone https://github.com/hunguyen1702/condaBuildLocalTemplate.git\nmv condaBuildLocalTemplate your_package_name\nrm -rf .git README.md", 
            "title": "Step 5: 2"
        }, 
        {
            "location": "/web/#step-6-edit-metayaml-file-in-your_package-folder", 
            "text": "", 
            "title": "Step 6: Edit meta.yaml file in your_package folder"
        }, 
        {
            "location": "/web/#61-follow-instruction-inside-metayaml", 
            "text": "", 
            "title": "6.1 Follow instruction inside meta.yaml"
        }, 
        {
            "location": "/web/#62-replace-these-line", 
            "text": "requirements:\n  build:\n    - python\n    - setuptools\n  run:\n    - python", 
            "title": "6.2 Replace these line"
        }, 
        {
            "location": "/web/#with", 
            "text": "requirements:\n  build:\n    - python\n    - setuptools\n    - six\n    - certifi\n    - python-dateutil\n  run:\n    - python\n    - six\n    - certifi\n    - python-dateutil", 
            "title": "with:"
        }, 
        {
            "location": "/web/#step-7", 
            "text": "cd ..\nconda build your_package", 
            "title": "Step 7:"
        }, 
        {
            "location": "/web/#step-8", 
            "text": "mkdir channel\ncd channel\nconda convert --platform all ~/anaconda/conda-bld/linux-64/your_package_0.1.0-py27_0.tar.bz2", 
            "title": "Step 8:"
        }, 
        {
            "location": "/web/#step-9-create-virtual-env", 
            "text": "name: your_env_name\ndependencies:\n- certifi=2016.2.28=py27_0\n- openssl=1.0.2h=0\n- pip=8.1.2=py27_0\n- python=2.7.11=0\n- python-dateutil=2.5.3=py27_0\n- readline=6.2=2\n- setuptools=20.7.0=py27_0\n- six=1.10.0=py27_0\n- tk=8.5.18=0\n- wheel=0.29.0=py27_0\n- zlib=1.2.8=0\n- pip:\n  - urllib3==1.15.1", 
            "title": "Step 9: Create virtual-env"
        }, 
        {
            "location": "/web/#step-10-install", 
            "text": "conda install --use-local your_package      Django    Writing your first Django app, part 1    Django REST framework: Installation    Django: Migrations    Building a Simple REST API for Mobile Applications    Django: Models    How to show object details in Django Rest Framework browseable API?    rest_framework:mixins", 
            "title": "Step 10: Install:"
        }, 
        {
            "location": "/package_manager/", 
            "text": "py2exe\n\n\nInstallation\n\n\n# py2exe\nconda install -c https://conda.anaconda.org/clinicalgraphics cg-py2exe\n\n\n\n\nBuild \n1\n\n\npython setup.py py2exe\n# build PyQT\npython setup.py py2exe --includes sip\n\n\n\n\n\n\n\n\n\n\n\n\nhttp://www.py2exe.org/index.cgi/Py2exeAndPyQt", 
            "title": "Package Manager"
        }, 
        {
            "location": "/package_manager/#py2exe", 
            "text": "", 
            "title": "py2exe"
        }, 
        {
            "location": "/package_manager/#installation", 
            "text": "# py2exe\nconda install -c https://conda.anaconda.org/clinicalgraphics cg-py2exe", 
            "title": "Installation"
        }, 
        {
            "location": "/package_manager/#build-1", 
            "text": "python setup.py py2exe\n# build PyQT\npython setup.py py2exe --includes sip      http://www.py2exe.org/index.cgi/Py2exeAndPyQt", 
            "title": "Build 1"
        }, 
        {
            "location": "/environment/", 
            "text": "Environment\n\n\npython environemnt manager with conda \n1\n\n\n# create new environment\nconda create -n \nyour_environment\n python=2.7.11\n\n# list environment\nconda info -e\n\n# remove environment\nconda remove -n \nyour_environemnt\n --all\n\n\n\n\nEnvironment File\n\n\n# export environment\n\n\n\n\n\n\n\n\n\n\n\n\n\nConda, Managing environments", 
            "title": "Environment"
        }, 
        {
            "location": "/environment/#environment", 
            "text": "python environemnt manager with conda  1  # create new environment\nconda create -n  your_environment  python=2.7.11\n\n# list environment\nconda info -e\n\n# remove environment\nconda remove -n  your_environemnt  --all  Environment File  # export environment      Conda, Managing environments", 
            "title": "Environment"
        }, 
        {
            "location": "/make_a_module/", 
            "text": "Create Public Module\n\n\nconda\n, \npypi\n, \ngithub\n\n\nStep 0/4: Check your package name\n\n\nGo to \nhttps://pypi.python.org/pypi/your_package_name\n to see your package name is valid\n\n\nStep 1/4: Make your module \n1\n\n\n1.1\n \npip install cookiecutter\n\n\n1.2\n \ncookiecutter https://github.com/audreyr/cookiecutter-pypackage.git\n\n\n1.3\n Fill all necessary information\n\n\nfull_name [Audrey Roy Greenfeld]:\nemail [aroy@alum.mit.edu]:\ngithub_username [audreyr]:\nproject_name [Python Boilerplate]:\nproject_slug []:\nproject_short_description:\nrelease_date []:\npypi_username []:\nyear [2016]:\nversion [0.1.0]:\nuse_pypi_deployment_with_travis [y]:\n\n\n\n\nIt will create a directory\n\n\n|- LICENSE\n|- README.md\n|- TODO.md\n|- docs\n|   |-- conf.py\n|   |-- generated\n|   |-- index.rst\n|   |-- installation.rst\n|   |-- modules.rst\n|   |-- quickstart.rst\n|   |-- sandman.rst\n|- requirements.txt\n|- your_package\n|   |-- __init__.py\n|   |-- your_package.py\n|   |-- test\n|       |-- models.py\n|       |-- test_your_package.py\n|- setup.py\n\n\n\n\nStep 2/4: Git\n\n\nStep 3/4: Pypi \n3\n\n\n1.\n Create your Pypi Account\n\n\n2.\n Create a \n.pypirc\n configuration file in \n$HOME\n directory\n\n\n[distutils]\nindex-servers =\n  pypi\n\n[pypi]\nrepository=https://pypi.python.org/pypi\nusername=your_username\npassword=your_password\n\n\n\n\n3.\n Change your \nMANIFEST.in\n\n\nrecursive-include project_folder *\n\n\n\n\n4.\n Upload your package to PyPI\n\n\npython setup.py register -r pypi\npython setup.py sdist upload -r pypi\n\n\n\n\nStep 4/4: Conda \n2\n\n\n1.\n Install conda tools\n\n\nconda install conda-build\nconda install anaconda-client\n\n\n\n\n2.\n Build a simple package with conda skeleton pypi\n\n\ncd your_package_folder\nmkdir conda\ncd conda\nconda skeleton pypi your_package\n\n\n\n\nThis creates a directory named \nyour_package\n and three skeleton files in that directory\n\n\n|- your_package\n|   |-- bld.bat\n|   |-- meta.yaml\n|   |-- build.sh\n\n\n\n\n3.\n Build your package\n\n\nconda build your_package\n\n# convert to all platform\nconda convert -f --platform all\n  C:\\Anaconda\\conda-bld\\win-64\\your_package-0.1.1-py27_0.tar.bz2\n\n\n\n\n4.\n Upload packages to Anaconda\n\n\nanaconda login\nanaconda upload linux-32/your_package.tar.bz2\nanaconda upload linux-64/your_package.tar.bz2\nanaconda upload win-32/your_package.tar.bz2\nanaconda upload win-64/your_package.tar.bz2\n\n\n\n\nCreate Private Module\n\n\nStep 1: Make your module \n1\n\n\n1.1\n \npip install cookiecutter\n\n\n1.2\n \ncookiecutter https://github.com/audreyr/cookiecutter-pypackage.git\n\n\n1.3\n Fill all necessary information\n\n\nfull_name [Audrey Roy Greenfeld]:\nemail [aroy@alum.mit.edu]:\ngithub_username [audreyr]:\nproject_name [Python Boilerplate]:\nproject_slug []:\nproject_short_description:\nrelease_date []:\npypi_username []:\nyear [2016]:\nversion [0.1.0]:\nuse_pypi_deployment_with_travis [y]:\n\n\n\n\nStep 2: Build your module\n\n\nChange your \nMANIFEST.in\n\n\nrecursive-include project_folder *\n\n\n\n\nBuild your module with setup.py\n\n\ncd your_project_folder\n\n# build local\npython setup.py build\n\n It will create a new folder in\n\n $PYTHON_HOME/Lib/sites-packages/your_project_name-0.1.0-py2.7.egg\n\n# build distribution\npython setup.py sdist\n\n It will create a zip file in $PROJECT_FOLDER/dist\n\n\n\n\nStep 3: Usage your module\n\n\nIn the same machine\n\n\nimport your_project_name\n\n\n\n\nIn other machine\n\n\n\n\n\nPython: Build \n Install Local Package with Conda\n\n\nHere is a step by step tutorial about building a local module package \n install it from a custom channel \n1\n\n\nStep 1: Make a setup folder for your package with \ncookkiecutter\n\n\non terminal:\n\n\n\nmkdir build\ncd build\npip install cookiecutter\ncookiecutter https://github.com/audreyr/cookiecutter-pypackage.git\n\n\n\n\n\nFill all necessary information\n\n\nfull_name [Audrey Roy Greenfeld]:\nemail [aroy@alum.mit.edu]:\ngithub_username [audreyr]:\nproject_name [Python Boilerplate]:\nproject_slug []:\nproject_short_description:\nrelease_date []:\npypi_username []:\nyear [2016]:\nversion [0.1.0]:\nuse_pypi_deployment_with_travis [y]:\n\n\n\n\nIt will create a directory\n\n\n|- LICENSE\n|- README.md\n|- TODO.md\n|- docs\n|   |-- conf.py\n|   |-- generated\n|   |-- index.rst\n|   |-- installation.rst\n|   |-- modules.rst\n|   |-- quickstart.rst\n|   |-- sandman.rst\n|- requirements.txt\n|- your_package\n|   |-- __init__.py\n|   |-- your_package.py\n|   |-- test\n|       |-- models.py\n|       |-- test_your_package.py\n|- setup.py\n\n\n\n\nCopy your real package into directory above \n replace the package has been generated by\n\ncookkiecutter\n\n\nAdd this line to \nMANIFEST.in\n\n\nrecursive-include project_folder *\n\n\n\n\nStep 2: Build conda package\n\n\nmkdir conda\ncd conda\nmkdir channel\ngit clone https://github.com/hunguyen1702/condaBuildLocalTemplate.git\nmv condaBuildLocalTemplate your_package_name #Which ones you have filled in `project_name` above\ncd your_package_name\nrm -rf .git README.md\n\n\n\n\nEdit the file \nmeta.yaml\n with the instruction inside it\n\n\ncd ..\nconda build your_package_name\n\n\n\n\nStep 3: Create custom channel and install from local package\n\n\nCreate a channel directory\n\n\ncd channel\n\n\n\n\nConvert your_package you've built to all platform\n\n\nconda convert --platform all ~/anaconda/conda-bld/linux-64/your_package_0.1.0-py27_0.tar.bz2\n\n\n\n\nand this will create:\n\n\nchannel/\nlinux-64/\n   package-1.0-0.tar.bz2\nlinux-32/\n   package-1.0-0.tar.bz2\nosx-64/\n   package-1.0-0.tar.bz2\nwin-64/\n   package-1.0-0.tar.bz2\nwin-32/\n   package-1.0-0.tar.bz2\n\n\n\n\nRegister your package to your new channel\n\n\ncd ..\nconda index channel/linux-64 channel/osx-64 channel/win-64\n\n\n\n\nVeriy your new channel\n\n\nconda search -c file://path/to/channel/ --override-channels\n\n\n\n\nIf you see \nyour_package\n's appearance, so it's worked\n\n\nAfter that if you want to install that package from local, run this command:\n\n\n\nconda install --use-local your_package\n\n\n\n\n\nand when you want to create environment with local package from file, you just have export environment to \n.yml\n file and add this \nchannels\n section before the \ndependencies\n section:\n\n\n\nchannels:\n- file://path/to/your/channel/\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpen Sourcing a Python Project the Right Way\n\n\n\n\n\n\nBuilding conda packages with conda skeleton\n\n\n\n\n\n\nHow to submit a package to PyPI", 
            "title": "Module"
        }, 
        {
            "location": "/make_a_module/#create-public-module", 
            "text": "conda ,  pypi ,  github", 
            "title": "Create Public Module"
        }, 
        {
            "location": "/make_a_module/#step-04-check-your-package-name", 
            "text": "Go to  https://pypi.python.org/pypi/your_package_name  to see your package name is valid", 
            "title": "Step 0/4: Check your package name"
        }, 
        {
            "location": "/make_a_module/#step-14-make-your-module-1", 
            "text": "1.1   pip install cookiecutter  1.2   cookiecutter https://github.com/audreyr/cookiecutter-pypackage.git  1.3  Fill all necessary information  full_name [Audrey Roy Greenfeld]:\nemail [aroy@alum.mit.edu]:\ngithub_username [audreyr]:\nproject_name [Python Boilerplate]:\nproject_slug []:\nproject_short_description:\nrelease_date []:\npypi_username []:\nyear [2016]:\nversion [0.1.0]:\nuse_pypi_deployment_with_travis [y]:  It will create a directory  |- LICENSE\n|- README.md\n|- TODO.md\n|- docs\n|   |-- conf.py\n|   |-- generated\n|   |-- index.rst\n|   |-- installation.rst\n|   |-- modules.rst\n|   |-- quickstart.rst\n|   |-- sandman.rst\n|- requirements.txt\n|- your_package\n|   |-- __init__.py\n|   |-- your_package.py\n|   |-- test\n|       |-- models.py\n|       |-- test_your_package.py\n|- setup.py", 
            "title": "Step 1/4: Make your module 1"
        }, 
        {
            "location": "/make_a_module/#step-24-git", 
            "text": "", 
            "title": "Step 2/4: Git"
        }, 
        {
            "location": "/make_a_module/#step-34-pypi-3", 
            "text": "1.  Create your Pypi Account  2.  Create a  .pypirc  configuration file in  $HOME  directory  [distutils]\nindex-servers =\n  pypi\n\n[pypi]\nrepository=https://pypi.python.org/pypi\nusername=your_username\npassword=your_password  3.  Change your  MANIFEST.in  recursive-include project_folder *  4.  Upload your package to PyPI  python setup.py register -r pypi\npython setup.py sdist upload -r pypi", 
            "title": "Step 3/4: Pypi 3"
        }, 
        {
            "location": "/make_a_module/#step-44-conda-2", 
            "text": "1.  Install conda tools  conda install conda-build\nconda install anaconda-client  2.  Build a simple package with conda skeleton pypi  cd your_package_folder\nmkdir conda\ncd conda\nconda skeleton pypi your_package  This creates a directory named  your_package  and three skeleton files in that directory  |- your_package\n|   |-- bld.bat\n|   |-- meta.yaml\n|   |-- build.sh  3.  Build your package  conda build your_package\n\n# convert to all platform\nconda convert -f --platform all\n  C:\\Anaconda\\conda-bld\\win-64\\your_package-0.1.1-py27_0.tar.bz2  4.  Upload packages to Anaconda  anaconda login\nanaconda upload linux-32/your_package.tar.bz2\nanaconda upload linux-64/your_package.tar.bz2\nanaconda upload win-32/your_package.tar.bz2\nanaconda upload win-64/your_package.tar.bz2", 
            "title": "Step 4/4: Conda 2"
        }, 
        {
            "location": "/make_a_module/#create-private-module", 
            "text": "", 
            "title": "Create Private Module"
        }, 
        {
            "location": "/make_a_module/#step-1-make-your-module-1", 
            "text": "1.1   pip install cookiecutter  1.2   cookiecutter https://github.com/audreyr/cookiecutter-pypackage.git  1.3  Fill all necessary information  full_name [Audrey Roy Greenfeld]:\nemail [aroy@alum.mit.edu]:\ngithub_username [audreyr]:\nproject_name [Python Boilerplate]:\nproject_slug []:\nproject_short_description:\nrelease_date []:\npypi_username []:\nyear [2016]:\nversion [0.1.0]:\nuse_pypi_deployment_with_travis [y]:", 
            "title": "Step 1: Make your module 1"
        }, 
        {
            "location": "/make_a_module/#step-2-build-your-module", 
            "text": "Change your  MANIFEST.in  recursive-include project_folder *  Build your module with setup.py  cd your_project_folder\n\n# build local\npython setup.py build  It will create a new folder in  $PYTHON_HOME/Lib/sites-packages/your_project_name-0.1.0-py2.7.egg\n\n# build distribution\npython setup.py sdist  It will create a zip file in $PROJECT_FOLDER/dist", 
            "title": "Step 2: Build your module"
        }, 
        {
            "location": "/make_a_module/#step-3-usage-your-module", 
            "text": "In the same machine  import your_project_name  In other machine", 
            "title": "Step 3: Usage your module"
        }, 
        {
            "location": "/make_a_module/#python-build-install-local-package-with-conda", 
            "text": "Here is a step by step tutorial about building a local module package   install it from a custom channel  1", 
            "title": "Python: Build &amp; Install Local Package with Conda"
        }, 
        {
            "location": "/make_a_module/#step-1-make-a-setup-folder-for-your-package-with-cookkiecutter", 
            "text": "on terminal:  \nmkdir build\ncd build\npip install cookiecutter\ncookiecutter https://github.com/audreyr/cookiecutter-pypackage.git  Fill all necessary information  full_name [Audrey Roy Greenfeld]:\nemail [aroy@alum.mit.edu]:\ngithub_username [audreyr]:\nproject_name [Python Boilerplate]:\nproject_slug []:\nproject_short_description:\nrelease_date []:\npypi_username []:\nyear [2016]:\nversion [0.1.0]:\nuse_pypi_deployment_with_travis [y]:  It will create a directory  |- LICENSE\n|- README.md\n|- TODO.md\n|- docs\n|   |-- conf.py\n|   |-- generated\n|   |-- index.rst\n|   |-- installation.rst\n|   |-- modules.rst\n|   |-- quickstart.rst\n|   |-- sandman.rst\n|- requirements.txt\n|- your_package\n|   |-- __init__.py\n|   |-- your_package.py\n|   |-- test\n|       |-- models.py\n|       |-- test_your_package.py\n|- setup.py  Copy your real package into directory above   replace the package has been generated by cookkiecutter  Add this line to  MANIFEST.in  recursive-include project_folder *", 
            "title": "Step 1: Make a setup folder for your package with cookkiecutter"
        }, 
        {
            "location": "/make_a_module/#step-2-build-conda-package", 
            "text": "mkdir conda\ncd conda\nmkdir channel\ngit clone https://github.com/hunguyen1702/condaBuildLocalTemplate.git\nmv condaBuildLocalTemplate your_package_name #Which ones you have filled in `project_name` above\ncd your_package_name\nrm -rf .git README.md", 
            "title": "Step 2: Build conda package"
        }, 
        {
            "location": "/make_a_module/#edit-the-file-metayaml-with-the-instruction-inside-it", 
            "text": "cd ..\nconda build your_package_name", 
            "title": "Edit the file meta.yaml with the instruction inside it"
        }, 
        {
            "location": "/make_a_module/#step-3-create-custom-channel-and-install-from-local-package", 
            "text": "Create a channel directory  cd channel  Convert your_package you've built to all platform  conda convert --platform all ~/anaconda/conda-bld/linux-64/your_package_0.1.0-py27_0.tar.bz2  and this will create:  channel/\nlinux-64/\n   package-1.0-0.tar.bz2\nlinux-32/\n   package-1.0-0.tar.bz2\nosx-64/\n   package-1.0-0.tar.bz2\nwin-64/\n   package-1.0-0.tar.bz2\nwin-32/\n   package-1.0-0.tar.bz2  Register your package to your new channel  cd ..\nconda index channel/linux-64 channel/osx-64 channel/win-64  Veriy your new channel  conda search -c file://path/to/channel/ --override-channels  If you see  your_package 's appearance, so it's worked  After that if you want to install that package from local, run this command:  \nconda install --use-local your_package  and when you want to create environment with local package from file, you just have export environment to  .yml  file and add this  channels  section before the  dependencies  section:  \nchannels:\n- file://path/to/your/channel/      Open Sourcing a Python Project the Right Way    Building conda packages with conda skeleton    How to submit a package to PyPI", 
            "title": "Step 3: Create custom channel and install from local package"
        }, 
        {
            "location": "/production/", 
            "text": "Production with \ndocker\n\n\nBase Image: \nmagizbox/conda2.7/\n\n\nDocker Folder\n\n\nyour_app/\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 run.sh\n\n\n\n\nDockerfile\n\n\nFROM magizbox/conda2.7:4.0\n\nADD ./app /app\nADD ./run.sh /run.sh\n\nRUN conda env create -f environment.yml\n\n\n\n\nrun.sh\n\n\nsource activate your_environment\n\ncd /app\n\npython main.py\n\n\n\n\nCompose\n\n\n service:\n  build: ./service-app\n  command: 'bash run.sh'\n\n\n\n\nNote: an other python conda with lower version (such as 3.5), will occur error when install requests package", 
            "title": "Production"
        }, 
        {
            "location": "/production/#production-with-docker", 
            "text": "Base Image:  magizbox/conda2.7/  Docker Folder  your_app/\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 run.sh  Dockerfile  FROM magizbox/conda2.7:4.0\n\nADD ./app /app\nADD ./run.sh /run.sh\n\nRUN conda env create -f environment.yml  run.sh  source activate your_environment\n\ncd /app\n\npython main.py  Compose   service:\n  build: ./service-app\n  command: 'bash run.sh'  Note: an other python conda with lower version (such as 3.5), will occur error when install requests package", 
            "title": "Production with docker"
        }
    ]
}